outs,out2s,insts,firsts,seconds,commands,queries,questions
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: N/A

Step 2. Instructions:
[View 1]; [Data]: Use Google's stock price data; [Chart-Type]: Create a line chart; [Mark]: Use a line mark; [Encoding]: Encode the x-axis with the date field, using a temporal type and a time unit of year, month, date, hours, and minutes, and scale it using UTC; [Encoding]: Encode the y-axis with the price field, using a quantitative type.

Step 3. Instructions:
[View 1]; [Data]: Use Google's stock price data; [Chart-Type]: Create a line chart; [Mark]: Use a line mark; [Encoding]: Encode the x-axis with the date field, using a temporal type and a time unit of year, month, date, hours, and minutes, and scale it using UTC; [Encoding]: Encode the y-axis with the price field, using a quantitative type.","View #1:
Step 1. Primary Information: The chart is a line chart with date on the x-axis and price on the y-axis.
Step 2. Secondary Information: The x-axis is encoded with a temporal type and a time unit of year, month, date, hours, and minutes, and scaled using UTC.
Step 3. Command: Create a line chart with date on the x-axis and price on the y-axis.
Step 4. Query: Line chart, date, price
Step 5. Question: How does the price change over time on the line chart?","View #1: [Chart-Type]: Create a line chart; [Encoding]: Encode the x-axis with the date field, using a temporal type and a time unit of year, month, date, hours, and minutes, and scale it using UTC; [Encoding]: Encode the y-axis with the price field, using a quantitative type.",['The chart is a line chart with date on the x-axis and price on the y-axis.'],"['The x-axis is encoded with a temporal type and a time unit of year, month, date, hours, and minutes, and scaled using UTC.']",['Create a line chart with date on the x-axis and price on the y-axis.'],"['Line chart, date, price']",['How does the price change over time on the line chart?']
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL 'https://raw.githubusercontent.com/UIUC-iSchool-DataViz/is445_bcubcg_fall2022/main/data/mobility.csv'; [Chart-Type]: Create a point chart; [Mark]: Use point as the mark for the chart; [Encoding]: Map 'Mobility' field to the x-axis and 'Population' field to the y-axis; [Encoding]: Apply a logarithmic scale to the 'Population' field on the y-axis; [Encoding]: Map 'Income' field to the color of the points and bin the 'Income' field into 5 bins; [Encoding]: Use the 'sinebow' color scheme for the 'Income' field; [Style]: Set the width of the chart to fit the container; [Style]: Set the continuous width to 400 and continuous height to 300.

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL 'https://raw.githubusercontent.com/UIUC-iSchool-DataViz/is445_bcubcg_fall2022/main/data/mobility.csv'; [Chart-Type]: Create a point chart; [Mark]: Use point as the mark for the chart; [Encoding]: Map 'Mobility' field to the x-axis and 'Population' field to the y-axis; [Encoding]: Apply a logarithmic scale to the 'Population' field on the y-axis; [Encoding]: Map 'Income' field to the color of the points and bin the 'Income' field into 5 bins; [Encoding]: Use the 'sinebow' color scheme for the 'Income' field; [Style]: Set the width of the chart to fit the container; [Style]: Set the continuous width to 400 and continuous height to 300.","View #1:
Step 1. Primary Information: The chart type is a point chart with 'Mobility' field on the x-axis and 'Population' field on the y-axis with a logarithmic scale.
Step 2. Secondary Information: The 'Income' field is mapped to the color of the points and is binned into 5 bins using the 'sinebow' color scheme.
Step 3. Command: Create a point chart with 'Mobility' on the x-axis and 'Population' on the y-axis using a logarithmic scale.
Step 4. Query: Point chart of 'Mobility' vs logarithmic 'Population'
Step 5. Question: What is the distribution of 'Population' with respect to 'Mobility' in a logarithmic scale?",View #1: [Chart-Type]: Create a point chart; [Encoding]: Map 'Mobility' field to the x-axis and 'Population' field to the y-axis; [Encoding]: Apply a logarithmic scale to the 'Population' field on the y-axis; [Encoding]: Map 'Income' field to the color of the points and bin the 'Income' field into 5 bins; [Encoding]: Use the 'sinebow' color scheme for the 'Income' field,"[""The chart type is a point chart with 'Mobility' field on the x-axis and 'Population' field on the y-axis with a logarithmic scale.""]","[""The 'Income' field is mapped to the color of the points and is binned into 5 bins using the 'sinebow' color scheme.""]","[""Create a point chart with 'Mobility' on the x-axis and 'Population' on the y-axis using a logarithmic scale.""]","[""Point chart of 'Mobility' vs logarithmic 'Population'""]","[""What is the distribution of 'Population' with respect to 'Mobility' in a logarithmic scale?""]"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: multiple views
- Number of plots: 2

Step 2. Instructions:
[View 1]; [Data]: Load the dataset from the URL 'https://raw.githubusercontent.com/UIUC-iSchool-DataViz/is445_bcubcg_fall2022/main/data/building_inventory.csv'; [Chart-Type]: Create a rectangular chart; [Mark]: Use rectangles as marks; [Encoding]: Encode the 'Agency Name' field on the x-axis and the 'County' field on the y-axis; [Encoding]: Color the rectangles based on the count of records; [Interaction]: Add an interval selection interaction that allows selection along the x and y axes; [Style]: Set the height of the chart to 700 and the width to 500 <%>
[View 2]; [Data]: Use the same dataset from the URL 'https://raw.githubusercontent.com/UIUC-iSchool-DataViz/is445_bcubcg_fall2022/main/data/building_inventory.csv'; [Chart-Type]: Create a bar chart; [Mark]: Use bars as marks and color them green; [Encoding]: Encode the 'Agency Name' field on the x-axis and the sum of 'Square Footage' field on the y-axis; [Transform]: Filter the data based on the selection made in View 1.

Step 3. Instructions:
[View 1]; [Data]: Load the dataset from the provided URL; [Chart-Type]: Create a rectangular chart; [Mark]: Use rectangles as marks; [Encoding]: Encode the 'Department' field on the x-axis and the 'County' field on the y-axis; [Encoding]: Color the rectangles based on the count of records; [Interaction]: Add an interval selection interaction that allows selection along the x and y axes; [Style]: Set the height of the chart to 700 and the width to 500 <%>
[View 2]; [Data]: Use the same dataset from the provided URL; [Chart-Type]: Create a bar chart; [Mark]: Use bars as marks and color them green; [Encoding]: Encode the 'Department' field on the x-axis and the sum of 'Building Area' field on the y-axis; [Transform]: Filter the data based on the selection made in View 1.","View #1:
Step 1. Primary Information: The chart type is a rectangular chart with 'Department' on the x-axis and 'County' on the y-axis. The rectangles are colored based on the count of records.
Step 2. Secondary Information: None
Step 3. Command: Create a rectangular chart with 'Department' on the x-axis and 'County' on the y-axis, color-coded by the count of records.
Step 4. Query: Rectangular chart, 'Department' x-axis, 'County' y-axis, color by count of records
Step 5. Question: What is the distribution of records across departments and counties?

View #2:
Step 1. Primary Information: The chart type is a bar chart with 'Department' on the x-axis and the sum of 'Building Area' on the y-axis.
Step 2. Secondary Information: None
Step 3. Command: Create a bar chart with 'Department' on the x-axis and the sum of 'Building Area' on the y-axis.
Step 4. Query: Bar chart, 'Department' x-axis, sum of 'Building Area' y-axis
Step 5. Question: What is the total building area for each department?","View #1: [Chart-Type]: Create a rectangular chart; [Encoding]: Encode the 'Department' field on the x-axis and the 'County' field on the y-axis; [Encoding]: Color the rectangles based on the count of records
View #2: [Chart-Type]: Create a bar chart; [Encoding]: Encode the 'Department' field on the x-axis and the sum of 'Building Area' field on the y-axis","[""The chart type is a rectangular chart with 'Department' on the x-axis and 'County' on the y-axis. The rectangles are colored based on the count of records."", ""The chart type is a bar chart with 'Department' on the x-axis and the sum of 'Building Area' on the y-axis.""]","['None', 'None']","[""Create a rectangular chart with 'Department' on the x-axis and 'County' on the y-axis, color-coded by the count of records."", ""Create a bar chart with 'Department' on the x-axis and the sum of 'Building Area' on the y-axis.""]","[""Rectangular chart, 'Department' x-axis, 'County' y-axis, color by count of records"", ""Bar chart, 'Department' x-axis, sum of 'Building Area' y-axis""]","['What is the distribution of records across departments and counties?', 'What is the total building area for each department?']"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: layered
- Number of plots: 2

Step 2. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/PremWoods/PremWoods.github.io/main/2020_values.csv'; [Chart-Type]: Choose a scatter plot; [Mark]: Use points as the mark and color them dark blue; [Encoding]: Map the 'X' field to the x-axis and the 'y' field to the y-axis; [Style]: Set the height of the chart to 350 and the width to 400; [Title]: Set the title as 'Linear regression of % of population in Extreme poverty on Net ODA received' with a subtitle of '% of population given by value reported closest to year 2022', 'Net ODA refers to Official Development Aid received (millions, in constant terms, 2020 US$)', 'Source: World Bank and UNDP', 'R Squared value = 0.11'. The title and subtitle should be anchored at the start and colored black. The subtitle should be in italic and have a font size of 10 <%>
[View 2]; [Chart-Type]: Choose a line chart; [Mark]: Use a line as the mark and color it red; [Encoding]: Map the 'X' field to the x-axis and the 'y2' field to the y-axis.

Step 3. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/PremWoods/PremWoods.github.io/main/2020_values.csv'; [Chart-Type]: Choose a scatter plot; [Mark]: Use points as the mark and color them dark blue; [Encoding]: Map the '1 - HDI' field to the x-axis and the 'ODA (millions US$)' field to the y-axis; [Style]: Set the height of the chart to 350 and the width to 400; [Title]: Set the title as 'Linear regression of % of population in Extreme poverty on Net ODA received' with a subtitle of '% of population given by value reported closest to year 2022', 'Net ODA refers to Official Development Aid received (millions, in constant terms, 2020 US$)', 'Source: World Bank and UNDP', 'R Squared value = 0.11'. The title and subtitle should be anchored at the start and colored black. The subtitle should be in italic and have a font size of 10 <%>
[View 2]; [Chart-Type]: Choose a line chart; [Mark]: Use a line as the mark and color it red; [Encoding]: Map the '1 - HDI' field to the x-axis and the 'y2' field to the y-axis.","View #1:
Step 1. Primary Information: The scatter plot chart type, '1 - HDI' field mapped to the x-axis, and the 'ODA (millions US$)' field mapped to the y-axis.
Step 2. Secondary Information: None
Step 3. Command: Create a scatter plot with '1 - HDI' on the x-axis and 'ODA (millions US$)' on the y-axis.
Step 4. Query: Scatter plot, '1 - HDI' x-axis, 'ODA (millions US$)' y-axis
Step 5. Question: What is the relationship between '1 - HDI' and 'ODA (millions US$)' in the scatter plot?

View #2:
Step 1. Primary Information: The line chart type, '1 - HDI' field mapped to the x-axis, and the 'y2' field mapped to the y-axis.
Step 2. Secondary Information: None
Step 3. Command: Create a line chart with '1 - HDI' on the x-axis and 'y2' on the y-axis.
Step 4. Query: Line chart, '1 - HDI' x-axis, 'y2' y-axis
Step 5. Question: What is the trend of 'y2' with respect to '1 - HDI' in the line chart?","View #1: [Chart-Type]: Choose a scatter plot; [Encoding]: Map the '1 - HDI' field to the x-axis and the 'ODA (millions US$)' field to the y-axis
View #2: [Chart-Type]: Choose a line chart; [Encoding]: Map the '1 - HDI' field to the x-axis and the 'y2' field to the y-axis.","[""The scatter plot chart type, '1 - HDI' field mapped to the x-axis, and the 'ODA (millions US$)' field mapped to the y-axis."", ""The line chart type, '1 - HDI' field mapped to the x-axis, and the 'y2' field mapped to the y-axis.""]","['None', 'None']","[""Create a scatter plot with '1 - HDI' on the x-axis and 'ODA (millions US$)' on the y-axis."", ""Create a line chart with '1 - HDI' on the x-axis and 'y2' on the y-axis.""]","[""Scatter plot, '1 - HDI' x-axis, 'ODA (millions US$)' y-axis"", ""Line chart, '1 - HDI' x-axis, 'y2' y-axis""]","[""What is the relationship between '1 - HDI' and 'ODA (millions US$)' in the scatter plot?"", ""What is the trend of 'y2' with respect to '1 - HDI' in the line chart?""]"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL 'https://raw.githubusercontent.com/COG-UK/UK-lineage-dynamics-analysis/2ca84630ab1fb80b949d25b05b6578fa9674f574/analyses/epidemiological/results/lag-estimation-llhds.csv'; [Chart-Type]: Create a point chart; [Mark]: Mark data points as points; [Encoding]: Map 'alpha' field to the x-axis and 'beta' field to the y-axis; [Encoding]: Map 'llhd' field to the size and color of the points; [Transform]: Scale the 'llhd' field using a threshold scale for size and a linear scale for color; [Style]: Set the x and y axes to not start from zero and remove the grid lines; [Style]: Set the stroke of the view to None; [Encoding]: Set the title of x-axis as 'Alpha', y-axis as 'Beta', size as 'Log-likelihood' and color as 'Log-likelihood'.

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL 'https://raw.githubusercontent.com/COG-UK/UK-lineage-dynamics-analysis/2ca84630ab1fb80b949d25b05b6578fa9674f574/analyses/epidemiological/results/lag-estimation-llhds.csv'; [Chart-Type]: Create a point chart; [Mark]: Mark data points as points; [Encoding]: Map 'Alpha' field to the x-axis and 'Beta' field to the y-axis; [Encoding]: Map 'Log-likelihood' field to the size and color of the points; [Transform]: Scale the 'Log-likelihood' field using a threshold scale for size and a linear scale for color; [Style]: Set the x and y axes to not start from zero and remove the grid lines; [Style]: Set the stroke of the view to None; [Encoding]: Set the title of x-axis as 'Alpha', y-axis as 'Beta', size as 'Log-likelihood' and color as 'Log-likelihood'.","View #1:
Step 1. Primary Information: The chart type is a point chart with 'Alpha' field mapped to the x-axis and 'Beta' field mapped to the y-axis. The 'Log-likelihood' field is mapped to the size and color of the points.
Step 2. Secondary Information: The title of x-axis is 'Alpha', y-axis is 'Beta', size is 'Log-likelihood' and color is 'Log-likelihood'.
Step 3. Command: Create a point chart with 'Alpha' on the x-axis, 'Beta' on the y-axis, and 'Log-likelihood' for the size and color of the points.
Step 4. Query: Point chart, 'Alpha' x-axis, 'Beta' y-axis, 'Log-likelihood' size and color
Step 5. Question: How does the 'Log-likelihood' vary with 'Alpha' and 'Beta' in the point chart?","View #1: [Chart-Type]: Create a point chart; [Encoding]: Map 'Alpha' field to the x-axis and 'Beta' field to the y-axis; [Encoding]: Map 'Log-likelihood' field to the size and color of the points; [Encoding]: Set the title of x-axis as 'Alpha', y-axis as 'Beta', size as 'Log-likelihood' and color as 'Log-likelihood'.","[""The chart type is a point chart with 'Alpha' field mapped to the x-axis and 'Beta' field mapped to the y-axis. The 'Log-likelihood' field is mapped to the size and color of the points.""]","[""The title of x-axis is 'Alpha', y-axis is 'Beta', size is 'Log-likelihood' and color is 'Log-likelihood'.""]","[""Create a point chart with 'Alpha' on the x-axis, 'Beta' on the y-axis, and 'Log-likelihood' for the size and color of the points.""]","[""Point chart, 'Alpha' x-axis, 'Beta' y-axis, 'Log-likelihood' size and color""]","[""How does the 'Log-likelihood' vary with 'Alpha' and 'Beta' in the point chart?""]"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/RDeconomist/RDeconomist.github.io/main/data/demographicsUN.csv' in CSV format; [Chart-Type]: Choose a line chart type; [Mark]: Set the mark type to line with a stroke width of 2; [Encoding]: Encode the data such that 'Year' is represented on the x-axis and 'sh_65+' on the y-axis. The 'Region' field should be used to determine the color of the lines; [Transform]: Filter the data based on the selection of 'Region'; [Style]: Set the background color to '#122b39', remove the stroke from the view, set the height and width to 300, and remove the grid from the x and y axes. Set the color of the x and y axis labels to '#00a767' and the tick color to 'pink'. Set the color of the domain to 'dimgrey' and the grid color to 'dimgrey'. Format the y-axis labels as percentages; [Interaction]: Add a selection interaction that allows the user to select a single 'Region' from a dropdown menu.

Step 3. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/RDeconomist/RDeconomist.github.io/main/data/demographicsUN.csv' in CSV format; [Chart-Type]: Choose a line chart type; [Mark]: Set the mark type to line with a stroke width of 2; [Encoding]: Encode the data such that 'Year' is represented on the x-axis and 'Share of population aged 65+' on the y-axis. The 'Country' field should be used to determine the color of the lines; [Transform]: Filter the data based on the selection of 'Country'; [Style]: Set the background color to '#122b39', remove the stroke from the view, set the height and width to 300, and remove the grid from the x and y axes. Set the color of the x and y axis labels to '#00a767' and the tick color to 'pink'. Set the color of the domain to 'dimgrey' and the grid color to 'dimgrey'. Format the y-axis labels as percentages; [Interaction]: Add a selection interaction that allows the user to select a single 'Country' from a dropdown menu.","View #1:
Step 1. Primary Information: The chart type is a line chart with 'Year' on the x-axis and 'Share of population aged 65+' on the y-axis. The 'Country' field determines the color of the lines.
Step 2. Secondary Information: There is no secondary information in this view.
Step 3. Command: Create a line chart with 'Year' on the x-axis and 'Share of population aged 65+' on the y-axis, using 'Country' to color the lines.
Step 4. Query: Line chart of 'Year' vs 'Share of population aged 65+' colored by 'Country'
Step 5. Question: What does the line chart of 'Year' against 'Share of population aged 65+' colored by 'Country' show?",View #1: [Chart-Type]: Choose a line chart type; [Encoding]: Encode the data such that 'Year' is represented on the x-axis and 'Share of population aged 65+' on the y-axis. The 'Country' field should be used to determine the color of the lines,"[""The chart type is a line chart with 'Year' on the x-axis and 'Share of population aged 65+' on the y-axis. The 'Country' field determines the color of the lines.""]",['There is no secondary information in this view.'],"[""Create a line chart with 'Year' on the x-axis and 'Share of population aged 65+' on the y-axis, using 'Country' to color the lines.""]","[""Line chart of 'Year' vs 'Share of population aged 65+' colored by 'Country'""]","[""What does the line chart of 'Year' against 'Share of population aged 65+' colored by 'Country' show?""]"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: N/A

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL ""https://www.trafforddatalab.io/interactive_graphics_companion/data/gapminder.csv""; [Transform]: Filter the data to include only the countries 'Canada', 'France', 'Germany', 'Italy', 'Japan', 'United Kingdom', 'United States'; [Transform]: Calculate the GDP by multiplying the population and GDP per capita and store it in a new field 'gdp'; [Transform]: Aggregate the data by summing the 'gdp' field and group by 'year' and 'country'; [Chart-Type]: Create an area chart; [Mark]: Use area marks to represent the data; [Encoding]: Encode the 'year' field on the x-axis as a temporal data type with a time unit of 'year'; [Encoding]: Encode the 'total' field on the y-axis as a quantitative data type; [Encoding]: Encode the 'country' field with color as a nominal data type; [Encoding]: Encode the 'choice' selection with opacity; [Encoding]: Add tooltips for 'year', 'country', and 'total' fields; [Style]: Set the view stroke to 'transparent'; [Interaction]: Add a multi selection interaction bound to the legend for the 'country' field.

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL ""https://www.trafforddatalab.io/interactive_graphics_companion/data/gapminder.csv""; [Transform]: Filter the data to include only the Country 'Canada', 'France', 'Germany', 'Italy', 'Japan', 'United Kingdom', 'United States'; [Transform]: Calculate the GDP by multiplying the population and GDP per capita and store it in a new field 'gdp'; [Transform]: Aggregate the data by summing the 'gdp' field and group by Year and Country; [Chart-Type]: Create an area chart; [Mark]: Use area marks to represent the data; [Encoding]: Encode the Year field on the x-axis as a temporal data type with a time unit of 'year'; [Encoding]: Encode the 'total' field on the y-axis as a quantitative data type; [Encoding]: Encode the Country field with color as a nominal data type; [Encoding]: Encode the 'choice' selection with opacity; [Encoding]: Add tooltips for Year, Country, and 'total' fields; [Style]: Set the view stroke to 'transparent'; [Interaction]: Add a multi selection interaction bound to the legend for the Country field.","View #1:
Step 1. Primary Information: The chart is an area chart that represents the 'total' field on the y-axis and the 'Year' field on the x-axis. The 'Country' field is represented by color.
Step 2. Secondary Information: The 'Year' field is a temporal data type with a time unit of 'year'. The 'total' field is a quantitative data type. The 'Country' field is a nominal data type. The 'choice' selection is encoded with opacity. Tooltips are added for 'Year', 'Country', and 'total' fields.
Step 3. Command: Create an area chart with 'Year' on the x-axis, 'total' on the y-axis, and 'Country' represented by color.
Step 4. Query: Area chart of 'total' by 'Year', color representation of 'Country'
Step 5. Question: How does the 'total' change over the years for each country in the area chart?","View #1: [Chart-Type]: Create an area chart; [Encoding]: Encode the Year field on the x-axis as a temporal data type with a time unit of 'year'; [Encoding]: Encode the 'total' field on the y-axis as a quantitative data type; [Encoding]: Encode the Country field with color as a nominal data type; [Encoding]: Encode the 'choice' selection with opacity; [Encoding]: Add tooltips for Year, Country, and 'total' fields","[""The chart is an area chart that represents the 'total' field on the y-axis and the 'Year' field on the x-axis. The 'Country' field is represented by color.""]","[""The 'Year' field is a temporal data type with a time unit of 'year'. The 'total' field is a quantitative data type. The 'Country' field is a nominal data type. The 'choice' selection is encoded with opacity. Tooltips are added for 'Year', 'Country', and 'total' fields.""]","[""Create an area chart with 'Year' on the x-axis, 'total' on the y-axis, and 'Country' represented by color.""]","[""Area chart of 'total' by 'Year', color representation of 'Country'""]","[""How does the 'total' change over the years for each country in the area chart?""]"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: trellis
- Number of plots: 12

Step 2. Instructions:
[View 1]; [Data]: Use the embedded data; [Transform]: Calculate the response rate by multiplying the responseRate field by 100 and name it as respRate; [Transform]: Calculate the respRateNice by flooring the respRate and adding a '%' sign; [Transform]: Clamp the respRate between 0 and 70 and name it as respRateTextPos; [Chart-Type]: Create a bar chart; [Mark]: Use a bar mark with clipping enabled; [Encoding]: Encode the y-axis with the 'driver' field and title it as 'DBMS'; [Encoding]: Encode the x-axis with the 'respRate' field, set the scale domain from 0 to 100, and title it as 'Response Rate'; [Encoding]: Encode the color with the 'driver' field, title it as 'DBMS' and disable the legend; [Style]: Set the height to 80 and width to 100; [Layer]: Add a text layer; [Mark]: In the text layer, align the text to the left, set the baseline to middle, enable clipping and set dx to 3; [Encoding]: In the text layer, encode the text with the 'respRateNice' field; [Encoding]: In the text layer, encode the y-axis with the 'driver' field and title it as 'DBMS'; [Encoding]: In the text layer, encode the x-axis with the 'respRateTextPos' field; [Facet]: Facet the chart by the 'dataset_size' field in rows and 'dataset' field in columns, title them as 'Dataset Size' and 'Dataset' respectively, and set the label and title padding to 2 and 0 respectively; [Config]: Set the facet spacing to 5.

Step 3. Instructions:
[View 1]; [Data]: Use the embedded data; [Transform]: Calculate the response rate by multiplying the Response Rate field by 100 and name it as Response Rate; [Transform]: Calculate the Response Rate Nice by flooring the Response Rate and adding a '%' sign; [Transform]: Clamp the Response Rate between 0 and 70 and name it as Response Rate Text Position; [Chart-Type]: Create a bar chart; [Mark]: Use a bar mark with clipping enabled; [Encoding]: Encode the y-axis with the DBMS field and title it as 'DBMS'; [Encoding]: Encode the x-axis with the Response Rate field, set the scale domain from 0 to 100, and title it as 'Response Rate'; [Encoding]: Encode the color with the DBMS field, title it as 'DBMS' and disable the legend; [Style]: Set the height to 80 and width to 100; [Layer]: Add a text layer; [Mark]: In the text layer, align the text to the left, set the baseline to middle, enable clipping and set dx to 3; [Encoding]: In the text layer, encode the text with the Response Rate Nice field; [Encoding]: In the text layer, encode the y-axis with the DBMS field and title it as 'DBMS'; [Encoding]: In the text layer, encode the x-axis with the Response Rate Text Position field; [Facet]: Facet the chart by the Dataset Size field in rows and Dataset field in columns, title them as 'Dataset Size' and 'Dataset' respectively, and set the label and title padding to 2 and 0 respectively; [Config]: Set the facet spacing to 5.","View #1:
Step 1. Primary Information: The chart is a bar chart that represents the response rate of different DBMS.
Step 2. Secondary Information: The color of the bars is encoded with the DBMS field and there is a text layer that shows the response rate in a nice format.
Step 3. Command: Create a bar chart with DBMS on the y-axis and Response Rate on the x-axis.
Step 4. Query: DBMS, Response Rate from 0 to 100
Step 5. Question: What is the response rate for each DBMS?","View #1: [Chart-Type]: Create a bar chart; [Encoding]: Encode the y-axis with the DBMS field and title it as 'DBMS'; [Encoding]: Encode the x-axis with the Response Rate field, set the scale domain from 0 to 100, and title it as 'Response Rate'; [Encoding]: Encode the color with the DBMS field, title it as 'DBMS' and disable the legend; [Encoding]: In the text layer, encode the text with the Response Rate Nice field; [Encoding]: In the text layer, encode the y-axis with the DBMS field and title it as 'DBMS'; [Encoding]: In the text layer, encode the x-axis with the Response Rate Text Position field",['The chart is a bar chart that represents the response rate of different DBMS.'],['The color of the bars is encoded with the DBMS field and there is a text layer that shows the response rate in a nice format.'],['Create a bar chart with DBMS on the y-axis and Response Rate on the x-axis.'],"['DBMS, Response Rate from 0 to 100']",['What is the response rate for each DBMS?']
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL ""https://www.trafforddatalab.io/interactive_graphics_companion/data/gapminder.csv""; [Transform]: Filter the data to include only the year 2017; [Transform]: Further filter the data to include only the region ""Europe""; [Transform]: Calculate the median of the GDP per capita and add it as a new field ""median""; [Transform]: Calculate the difference between the GDP per capita and the median and add it as a new field ""diff""; [Transform]: Determine if the GDP per capita is above or below the median and add it as a new field ""type""; [Chart-Type]: Create a bar chart; [Mark]: Use bars to represent data; [Encoding]: Map the ""country"" field to the y-axis; [Encoding]: Sort the y-axis in descending order based on the mean of the ""diff"" field; [Encoding]: Map the ""diff"" field to the x-axis; [Encoding]: Map the ""type"" field to color; [Encoding]: Set the opacity of the bars to 0.7; [Encoding]: Add tooltips for ""country"", ""GDP per capita"", and ""diff""; [Style]: Remove the grid and ticks from the y-axis; [Style]: Remove the ticks from the x-axis and format it to display income per person; [Style]: Set the color scale range to ['#91cf60', '#fc8d59']; [Style]: Position the legend at the top and remove its title; [Style]: Remove the domain color from the axis; [Style]: Set the cell stroke to transparent.

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL ""https://www.trafforddatalab.io/interactive_graphics_companion/data/gapminder.csv""; [Transform]: Filter the data to include only the year 2017; [Transform]: Further filter the data to include only the region ""Europe""; [Transform]: Calculate the median of the GDP per capita (GDP per capita) and add it as a new field ""median""; [Transform]: Calculate the difference between the GDP per capita (GDP per capita) and the median and add it as a new field ""diff""; [Transform]: Determine if the GDP per capita (GDP per capita) is above or below the median and add it as a new field ""type""; [Chart-Type]: Create a bar chart; [Mark]: Use bars to represent data; [Encoding]: Map the ""Country"" field to the y-axis; [Encoding]: Sort the y-axis in descending order based on the mean of the ""diff"" field; [Encoding]: Map the ""diff"" field to the x-axis; [Encoding]: Map the ""type"" field to color; [Encoding]: Set the opacity of the bars to 0.7; [Encoding]: Add tooltips for ""Country"", ""GDP per capita"", and ""diff""; [Style]: Remove the grid and ticks from the y-axis; [Style]: Remove the ticks from the x-axis and format it to display income per person; [Style]: Set the color scale range to ['#91cf60', '#fc8d59']; [Style]: Position the legend at the top and remove its title; [Style]: Remove the domain color from the axis; [Style]: Set the cell stroke to transparent.","View #1:
Step 1. Primary Information: The chart is a bar chart that maps ""Country"" to the y-axis and ""diff"" to the x-axis. The y-axis is sorted in descending order based on the mean of the ""diff"" field. The ""type"" field is mapped to color.
Step 2. Secondary Information: The opacity of the bars is set to 0.7. Tooltips are added for ""Country"", ""GDP per capita"", and ""diff"".
Step 3. Command: Create a bar chart with countries on the y-axis and their corresponding differences on the x-axis, sorted in descending order, and color-coded by type.
Step 4. Query: Bar chart, Country on y-axis, diff on x-axis, descending order by mean of diff, type for color
Step 5. Question: What does the bar chart reveal about the differences among countries when sorted in descending order and color-coded by type?","View #1: [Chart-Type]: Create a bar chart; [Encoding]: Map the ""Country"" field to the y-axis; [Encoding]: Sort the y-axis in descending order based on the mean of the ""diff"" field; [Encoding]: Map the ""diff"" field to the x-axis; [Encoding]: Map the ""type"" field to color; [Encoding]: Set the opacity of the bars to 0.7; [Encoding]: Add tooltips for ""Country"", ""GDP per capita"", and ""diff""","['The chart is a bar chart that maps ""Country"" to the y-axis and ""diff"" to the x-axis. The y-axis is sorted in descending order based on the mean of the ""diff"" field. The ""type"" field is mapped to color.']","['The opacity of the bars is set to 0.7. Tooltips are added for ""Country"", ""GDP per capita"", and ""diff"".']","['Create a bar chart with countries on the y-axis and their corresponding differences on the x-axis, sorted in descending order, and color-coded by type.']","['Bar chart, Country on y-axis, diff on x-axis, descending order by mean of diff, type for color']",['What does the bar chart reveal about the differences among countries when sorted in descending order and color-coded by type?']
"Step 1. Composite Views:
- True/False: True
- (If True) Type: layered
- Number of plots: 3

Step 2. Instructions:
[View 1]; [Data]: Load the data from the provided URL; [Chart-Type]: Choose a bar chart; [Mark]: Set the opacity to 1, the size to 8, and the color to '#e6224b'; [Encoding]: Map 'date' to the x-axis and 'Net sales' to the y-axis; [Style]: Set the x-axis label angle to 0 and remove the grid; [Style]: Set the y-axis title color to '#e6224b' and add a grid; [Interaction]: Add tooltips for 'date', 'Net sales', 'Gross profit', 'Gross profit ratio', 'Operating profit', and 'Operating profit ratio' <%>
[View 2]; [Chart-Type]: Choose a line chart; [Mark]: Set the stroke to '#008B8B', the size to 2.3; [Encoding]: Map 'Gross profit ratio' to the y-axis; [Style]: Set the y-axis title color to '#122b39', add a grid with opacity 0.6, remove ticks, and set label padding to 5; [Interaction]: Add tooltips for 'date', 'Gross profit', and 'Gross profit ratio' <%>
[View 3]; [Chart-Type]: Choose a line chart; [Mark]: Set the stroke to '#4efa04cd', the size to 2.3; [Encoding]: Map 'Operating profit ratio' to the y-axis; [Style]: Set the y-axis title color to '#122b39', add a grid with opacity 0.6, remove ticks, and set label padding to 5; [Interaction]: Add tooltips for 'date', 'Operating profit', and 'Operating profit ratio' 

Step 3. Instructions:
[View 1]; [Data]: Load the data from the provided URL; [Chart-Type]: Choose a bar chart; [Mark]: Set the opacity to 1, the size to 8, and the color to '#e6224b'; [Encoding]: Map 'year' to the x-axis and 'net sales(million yen)' to the y-axis; [Style]: Set the x-axis label angle to 0 and remove the grid; [Style]: Set the y-axis title color to '#e6224b' and add a grid; [Interaction]: Add tooltips for 'Year', 'net sales(million yen)', 'Gross profit(million yen)', 'Gross/Operating profit ratio', 'Operating profit(million yen)', and 'Operating profit ratio' <%>
[View 2]; [Chart-Type]: Choose a line chart; [Mark]: Set the stroke to '#008B8B', the size to 2.3; [Encoding]: Map 'Gross/Operating profit ratio' to the y-axis; [Style]: Set the y-axis title color to '#122b39', add a grid with opacity 0.6, remove ticks, and set label padding to 5; [Interaction]: Add tooltips for 'Year', 'Gross profit(million yen)', and 'Gross/Operating profit ratio' <%>
[View 3]; [Chart-Type]: Choose a line chart; [Mark]: Set the stroke to '#4efa04cd', the size to 2.3; [Encoding]: Map 'Operating profit ratio' to the y-axis; [Style]: Set the y-axis title color to '#122b39', add a grid with opacity 0.6, remove ticks, and set label padding to 5; [Interaction]: Add tooltips for 'Year', 'Operating profit(million yen)', and 'Operating profit ratio'","View #1:
Step 1. Primary Information: The bar chart represents the net sales in million yen over the years.
Step 2. Secondary Information: The x-axis represents the years and the y-axis represents the net sales in million yen.
Step 3. Command: Create a bar chart with 'year' on the x-axis and 'net sales(million yen)' on the y-axis.
Step 4. Query: 'year' vs 'net sales(million yen)'
Step 5. Question: How have the net sales changed over the years?

View #2:
Step 1. Primary Information: The line chart represents the Gross/Operating profit ratio.
Step 2. Secondary Information: The y-axis represents the Gross/Operating profit ratio.
Step 3. Command: Create a line chart with 'Gross/Operating profit ratio' on the y-axis.
Step 4. Query: 'Gross/Operating profit ratio'
Step 5. Question: What is the trend of the Gross/Operating profit ratio?

View #3:
Step 1. Primary Information: The line chart represents the Operating profit ratio.
Step 2. Secondary Information: The y-axis represents the Operating profit ratio.
Step 3. Command: Create a line chart with 'Operating profit ratio' on the y-axis.
Step 4. Query: 'Operating profit ratio'
Step 5. Question: What is the trend of the Operating profit ratio?","View #1: [Chart-Type]: Choose a bar chart; [Encoding]: Map 'year' to the x-axis and 'net sales(million yen)' to the y-axis
View #2: [Chart-Type]: Choose a line chart; [Encoding]: Map 'Gross/Operating profit ratio' to the y-axis
View #3: [Chart-Type]: Choose a line chart; [Encoding]: Map 'Operating profit ratio' to the y-axis","['The bar chart represents the net sales in million yen over the years.', 'The line chart represents the Gross/Operating profit ratio.', 'The line chart represents the Operating profit ratio.']","['The x-axis represents the years and the y-axis represents the net sales in million yen.', 'The y-axis represents the Gross/Operating profit ratio.', 'The y-axis represents the Operating profit ratio.']","[""Create a bar chart with 'year' on the x-axis and 'net sales(million yen)' on the y-axis."", ""Create a line chart with 'Gross/Operating profit ratio' on the y-axis."", ""Create a line chart with 'Operating profit ratio' on the y-axis.""]","[""'year' vs 'net sales(million yen)'"", ""'Gross/Operating profit ratio'"", ""'Operating profit ratio'""]","['How have the net sales changed over the years?', 'What is the trend of the Gross/Operating profit ratio?', 'What is the trend of the Operating profit ratio?']"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: N/A

Step 2. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/vikrajendran/vikrajendran.github.io/main/canadaprov.json' and format it using the 'features' property; [Data]: Load additional data from the URL 'https://raw.githubusercontent.com/vikrajendran/vikrajendran.github.io/main/CanadaDensity.csv' and link it to the main data using the 'Province' key; [Transform]: Lookup the 'gn_name' property in the main data and match it with the 'Province' key in the additional data, bringing in the 'Population density per square kilometre, 2021' field; [Chart-Type]: Create a geoshape chart; [Mark]: Use a geoshape mark with a lightgray stroke and a stroke width of 0.3; [Encoding]: Encode the color of the geoshapes using the 'Population density per square kilometre, 2021' field, with a quantitative scale and a magma color scheme; [Encoding]: Add a tooltip that displays the 'gn_name' property as 'Province' and the 'Population density per square kilometre, 2021' field as 'Population Density', formatted to one decimal place; [Style]: Set the width of the chart to 400 and the height to 300; [Style]: Add a title 'Canada Population Density by Province' and a subtitle 'Data: Statistics Canada', with the subtitle in italic font and a font size of 10, anchored to the start of the chart and colored black; [Projection]: Use a conicConformal projection with a rotation of [0, 70].

Step 3. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/vikrajendran/vikrajendran.github.io/main/canadaprov.json' and format it using the 'features' property; [Data]: Load additional data from the URL 'https://raw.githubusercontent.com/vikrajendran/vikrajendran.github.io/main/CanadaDensity.csv' and link it to the main data using the 'Province' key; [Transform]: Lookup the 'Province Name' property in the main data and match it with the 'Province' key in the additional data, bringing in the 'Population Density in 2021' field; [Chart-Type]: Create a geoshape chart; [Mark]: Use a geoshape mark with a lightgray stroke and a stroke width of 0.3; [Encoding]: Encode the color of the geoshapes using the 'Population Density in 2021' field, with a quantitative scale and a magma color scheme; [Encoding]: Add a tooltip that displays the 'Province Name' property as 'Province' and the 'Population Density in 2021' field as 'Population Density', formatted to one decimal place; [Style]: Set the width of the chart to 400 and the height to 300; [Style]: Add a title 'Canada Population Density by Province' and a subtitle 'Data: Statistics Canada', with the subtitle in italic font and a font size of 10, anchored to the start of the chart and colored black; [Projection]: Use a conicConformal projection with a rotation of [0, 70].","View #1:
Step 1. Primary Information: The chart type is a geoshape chart, and the color of the geoshapes is encoded using the 'Population Density in 2021' field with a quantitative scale and a magma color scheme.
Step 2. Secondary Information: A tooltip is added that displays the 'Province Name' property as 'Province' and the 'Population Density in 2021' field as 'Population Density', formatted to one decimal place.
Step 3. Command: Create a geoshape chart with colors encoded by the 'Population Density in 2021' field using a quantitative scale and a magma color scheme.
Step 4. Query: Geoshape chart, color encoded by 'Population Density in 2021', quantitative scale, magma color scheme
Step 5. Question: How does the geoshape chart look when the color is encoded by the 'Population Density in 2021' field using a quantitative scale and a magma color scheme?","View #1: [Chart-Type]: Create a geoshape chart; [Encoding]: Encode the color of the geoshapes using the 'Population Density in 2021' field, with a quantitative scale and a magma color scheme; [Encoding]: Add a tooltip that displays the 'Province Name' property as 'Province' and the 'Population Density in 2021' field as 'Population Density', formatted to one decimal place","[""The chart type is a geoshape chart, and the color of the geoshapes is encoded using the 'Population Density in 2021' field with a quantitative scale and a magma color scheme.""]","[""A tooltip is added that displays the 'Province Name' property as 'Province' and the 'Population Density in 2021' field as 'Population Density', formatted to one decimal place.""]","[""Create a geoshape chart with colors encoded by the 'Population Density in 2021' field using a quantitative scale and a magma color scheme.""]","[""Geoshape chart, color encoded by 'Population Density in 2021', quantitative scale, magma color scheme""]","[""How does the geoshape chart look when the color is encoded by the 'Population Density in 2021' field using a quantitative scale and a magma color scheme?""]"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load the dataset; [Chart-Type]: Create a bar chart; [Mark]: Use bars to represent data; [Encoding]: Map 'Year' to the x-axis and 'Value' to the y-axis; [Encoding]: Do not stack the bars; [Encoding]: Map 'LOCATION' to color and xOffset; [Style]: Set the opacity of the bars to 0.9; [Style]: Set the color range for 'LOCATION' to ['#033542', '#78969d']; [Style]: Remove the title for the x-axis and y-axis; [Style]: Remove the grid, ticks from the x-axis and grid from the y-axis; [Style]: Rotate the x-axis labels by 45 degrees; [Style]: Set the chart width to 300 and height to 300; [Style]: Add a title 'Gender Pay Gap' and a subtitle 'Percentage difference in median earnings of men and women (full-time employees), source OECD', set the subtitle font style to italic and font size to 10, anchor the title to the start and set the title color to black.

Step 3. Instructions:
[View 1]; [Data]: Load the dataset; [Chart-Type]: Create a bar chart; [Mark]: Use bars to represent data; [Encoding]: Map 'Year' to the x-axis and 'Percentage difference in median earnings' to the y-axis; [Encoding]: Do not stack the bars; [Encoding]: Map 'Country' to color and xOffset; [Style]: Set the opacity of the bars to 0.9; [Style]: Set the color range for 'Country' to ['#033542', '#78969d']; [Style]: Remove the title for the x-axis and y-axis; [Style]: Remove the grid, ticks from the x-axis and grid from the y-axis; [Style]: Rotate the x-axis labels by 45 degrees; [Style]: Set the chart width to 300 and height to 300; [Style]: Add a title 'Gender Pay Gap' and a subtitle 'Percentage difference in median earnings of men and women (full-time employees), source OECD', set the subtitle font style to italic and font size to 10, anchor the title to the start and set the title color to black.","View #1:
Step 1. Primary Information: The chart type is a bar chart with 'Year' mapped to the x-axis and 'Percentage difference in median earnings' mapped to the y-axis. The bars are not stacked.
Step 2. Secondary Information: 'Country' is mapped to color and xOffset.
Step 3. Command: Create a bar chart with 'Year' on the x-axis and 'Percentage difference in median earnings' on the y-axis without stacking the bars.
Step 4. Query: Bar chart, Year on x-axis, Percentage difference in median earnings on y-axis, no bar stacking
Step 5. Question: What does the bar chart reveal about the yearly percentage difference in median earnings?",View #1: [Chart-Type]: Create a bar chart; [Encoding]: Map 'Year' to the x-axis and 'Percentage difference in median earnings' to the y-axis; [Encoding]: Do not stack the bars; [Encoding]: Map 'Country' to color and xOffset,"[""The chart type is a bar chart with 'Year' mapped to the x-axis and 'Percentage difference in median earnings' mapped to the y-axis. The bars are not stacked.""]","[""'Country' is mapped to color and xOffset.""]","[""Create a bar chart with 'Year' on the x-axis and 'Percentage difference in median earnings' on the y-axis without stacking the bars.""]","['Bar chart, Year on x-axis, Percentage difference in median earnings on y-axis, no bar stacking']",['What does the bar chart reveal about the yearly percentage difference in median earnings?']
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL ""https://raw.githubusercontent.com/RDeconomist/RDeconomist.github.io/main/data/GiltsInIssueClean.csv""; [Chart-Type]: Create a donut chart; [Mark]: Use an arc mark with an inner radius of 100; [Encoding]: Map the 'issueAmount' field to the theta channel and the 'giltType' field to the color channel; [Encoding]: Sort the color channel by the count of 'name' field in descending order; [Style]: Set the color scale range to ['red', 'purple', 'orange', 'green']; [Style]: Set the legend title to None and orient it to the bottom; [Style]: Set the view stroke to transparent; [Style]: Set the chart height to 300 and width to 290; [Style]: Set the chart title to 'UK debt - by type' with a subtitle 'Source: DMO' in italic font style and font size 10, anchor it to the start and color it black.

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL ""https://raw.githubusercontent.com/RDeconomist/RDeconomist.github.io/main/data/GiltsInIssueClean.csv""; [Chart-Type]: Create a donut chart; [Mark]: Use an arc mark with an inner radius of 100; [Encoding]: Map the 'issueAmount' field to the theta channel and the 'giltType' field to the color channel; [Encoding]: Sort the color channel by the count of 'name' field in descending order; [Style]: Set the color scale range to ['red', 'purple', 'orange', 'green']; [Style]: Set the legend title to None and orient it to the bottom; [Style]: Set the view stroke to transparent; [Style]: Set the chart height to 300 and width to 290; [Style]: Set the chart title to 'UK debt - by type' with a subtitle 'Source: DMO' in italic font style and font size 10, anchor it to the start and color it black.","View #1:
Step 1. Primary Information: The chart type is a donut chart. The 'issueAmount' field is mapped to the theta channel and the 'giltType' field is mapped to the color channel.
Step 2. Secondary Information: The color channel is sorted by the count of 'name' field in descending order.
Step 3. Command: Create a donut chart with 'issueAmount' on the theta channel and 'giltType' on the color channel.
Step 4. Query: 'issueAmount' to theta channel, 'giltType' to color channel, donut chart
Step 5. Question: What does the donut chart reveal about the 'issueAmount' and 'giltType'?",View #1: [Chart-Type]: Create a donut chart; [Encoding]: Map the 'issueAmount' field to the theta channel and the 'giltType' field to the color channel; [Encoding]: Sort the color channel by the count of 'name' field in descending order,"[""The chart type is a donut chart. The 'issueAmount' field is mapped to the theta channel and the 'giltType' field is mapped to the color channel.""]","[""The color channel is sorted by the count of 'name' field in descending order.""]","[""Create a donut chart with 'issueAmount' on the theta channel and 'giltType' on the color channel.""]","[""'issueAmount' to theta channel, 'giltType' to color channel, donut chart""]","[""What does the donut chart reveal about the 'issueAmount' and 'giltType'?""]"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: trellis
- Number of plots: 4

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL ""https://raw.githubusercontent.com/RDeconomist/RDeconomist.github.io/main/charts/productivity/BSD_SizeRLP.csv""; [Transform]: Fold the fields 'rlp10', 'rlp25', 'rlp50', 'rlp75', 'rlp90' into two new fields 'metric' and 'value'; [Transform]: Calculate a new field 'metricClean' by replacing 'rlp10' with '10th', 'rlp25' with '25th', 'rlp50' with '50th', 'rlp75' with '75th', 'rlp90' with '90th' in the 'metric' field; [Chart-Type]: Create a point chart; [Encoding]: Map 'Size' field to the x-axis and 'value' field to the y-axis; [Encoding]: Facet the chart by 'Year' field into 4 columns; [Encoding]: Use 'metricClean' field to color the points; [Style]: Set the color scheme to 'inferno'; [Style]: Place the legend at the bottom with 5 columns; [Style]: Set the grid of both x and y axis to false; [Style]: Format the x and y axis as 'd'; [Style]: Set the height of the chart to 300 and the width to 200; [Style]: Set the title of the chart to 'Productivity distribution, by firm size' and the subtitle to 'Estimates of porductivity distribution, firms with 1-25 employees'; [Style]: Set the subtitle font style to italic and the font size to 10; [Style]: Anchor the title to the start and set the color to black <%>

Step 3. Instructions:
[View 1]; [Data]: Load data from the provided URL; [Transform]: Fold the fields representing different percentiles into two new fields 'metric' and 'value'; [Transform]: Calculate a new field 'metricClean' by replacing percentile field names with their corresponding percentile values in the 'metric' field; [Chart-Type]: Create a point chart; [Encoding]: Map 'Employees' field to the x-axis and 'value' field to the y-axis; [Encoding]: Facet the chart by 'Year' field into 4 columns; [Encoding]: Use 'metricClean' field to color the points; [Style]: Set the color scheme to 'inferno'; [Style]: Place the legend at the bottom with 5 columns; [Style]: Set the grid of both x and y axis to false; [Style]: Format the x and y axis as 'd'; [Style]: Set the height of the chart to 300 and the width to 200; [Style]: Set the title of the chart to 'Productivity distribution, by firm size' and the subtitle to 'Estimates of porductivity distribution, firms with 1-25 employees'; [Style]: Set the subtitle font style to italic and the font size to 10; [Style]: Anchor the title to the start and set the color to black <%>","View #1:
Step 1. Primary Information: The chart type is a point chart with 'Employees' field on the x-axis and 'value' field on the y-axis.
Step 2. Secondary Information: The chart is faceted by 'Year' field into 4 columns and the points are colored by 'metricClean' field.
Step 3. Command: Create a point chart with 'Employees' on the x-axis and 'value' on the y-axis.
Step 4. Query: Point chart, 'Employees' x-axis, 'value' y-axis
Step 5. Question: Can you create a point chart with 'Employees' on the x-axis and 'value' on the y-axis?",View #1: [Chart-Type]: Create a point chart; [Encoding]: Map 'Employees' field to the x-axis and 'value' field to the y-axis; [Encoding]: Facet the chart by 'Year' field into 4 columns; [Encoding]: Use 'metricClean' field to color the points,"[""The chart type is a point chart with 'Employees' field on the x-axis and 'value' field on the y-axis.""]","[""The chart is faceted by 'Year' field into 4 columns and the points are colored by 'metricClean' field.""]","[""Create a point chart with 'Employees' on the x-axis and 'value' on the y-axis.""]","[""Point chart, 'Employees' x-axis, 'value' y-axis""]","[""Can you create a point chart with 'Employees' on the x-axis and 'value' on the y-axis?""]"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: trellis
- Number of plots: 5

Step 2. Instructions:
[View 1]; [Data]: Load the data from the URL ""https://raw.githubusercontent.com/RDeconomist/RDeconomist.github.io/main/charts/productivity/BSD_Industries.csv""; [Transform]: Fold the fields 'entryReallocate', 'growReallocate', 'exitReallocate', 'shrinkReallocate' into 'metric' and 'value'; [Transform]: Calculate a new field 'metricClean' by replacing 'entryReallocate' with 'Entry', 'exitReallocate' with 'Exit', 'growReallocate' with 'Hires', and 'shrinkReallocate' with 'Fires'; [Chart-Type]: Create a bar chart; [Mark]: Set the type of mark to 'bar' with a stroke width of 1 and no point; [Encoding]: Map 'period2' to the x-axis as an ordinal field with no title and no grid; [Encoding]: Map the mean of 'value' to the y-axis as a quantitative field with stacking enabled, no title, and no grid; [Encoding]: Facet the chart by 'Industry' as a nominal field with no title and 4 columns; [Encoding]: Map 'metricClean' to color with no title, using the 'inferno' color scheme and a legend at the bottom; [Style]: Set the height to 75 and the width to 100; [Resolve]: Make the y-axis independent for each facet <%>

Step 3. Instructions:
[View 1]; [Data]: Load the data from the provided URL; [Transform]: Fold the fields 'Jobs created', 'Jobs grown', 'Jobs exited', 'Jobs shrunk' into 'Metric' and 'Value'; [Transform]: Calculate a new field 'Metric Clean' by replacing 'Jobs created' with 'Entry', 'Jobs exited' with 'Exit', 'Jobs grown' with 'Hires', and 'Jobs shrunk' with 'Fires'; [Chart-Type]: Create a bar chart; [Mark]: Set the type of mark to 'bar' with a stroke width of 1 and no point; [Encoding]: Map 'Period' to the x-axis as an ordinal field with no title and no grid; [Encoding]: Map the mean of 'Value' to the y-axis as a quantitative field with stacking enabled, no title, and no grid; [Encoding]: Facet the chart by 'Industry' as a nominal field with no title and 4 columns; [Encoding]: Map 'Metric Clean' to color with no title, using the 'inferno' color scheme and a legend at the bottom; [Style]: Set the height to 75 and the width to 100; [Resolve]: Make the y-axis independent for each facet <%>","View #1:
Step 1. Primary Information: The chart is a bar chart with 'Period' on the x-axis and the mean of 'Value' on the y-axis. The chart is faceted by 'Industry' and 'Metric Clean' is mapped to color.
Step 2. Secondary Information: The x-axis and y-axis have no title and no grid. The color scheme is 'inferno' and the legend is at the bottom. The chart is divided into 4 columns.
Step 3. Command: Create a bar chart with 'Period' on the x-axis, the mean of 'Value' on the y-axis, faceted by 'Industry', and color-coded by 'Metric Clean'.
Step 4. Query: Bar chart, 'Period', mean of 'Value', facet by 'Industry', 'Metric Clean' to color
Step 5. Question: How does the mean value of different metrics vary over periods for different industries?","View #1: [Chart-Type]: Create a bar chart; [Encoding]: Map 'Period' to the x-axis as an ordinal field with no title and no grid; [Encoding]: Map the mean of 'Value' to the y-axis as a quantitative field with stacking enabled, no title, and no grid; [Encoding]: Facet the chart by 'Industry' as a nominal field with no title and 4 columns; [Encoding]: Map 'Metric Clean' to color with no title, using the 'inferno' color scheme and a legend at the bottom","[""The chart is a bar chart with 'Period' on the x-axis and the mean of 'Value' on the y-axis. The chart is faceted by 'Industry' and 'Metric Clean' is mapped to color.""]","[""The x-axis and y-axis have no title and no grid. The color scheme is 'inferno' and the legend is at the bottom. The chart is divided into 4 columns.""]","[""Create a bar chart with 'Period' on the x-axis, the mean of 'Value' on the y-axis, faceted by 'Industry', and color-coded by 'Metric Clean'.""]","[""Bar chart, 'Period', mean of 'Value', facet by 'Industry', 'Metric Clean' to color""]",['How does the mean value of different metrics vary over periods for different industries?']
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load the data from the URL ""https://raw.githubusercontent.com/RDeconomist/teaching2/main/cpiContributions.csv"" and format it as CSV; [Chart-Type]: Create a bar chart; [Mark]: Set the width of the bars to 3; [Encoding]: Map the ""Date"" field to the x-axis and the ""Value"" field to the y-axis; [Encoding]: Use the ""series"" field to color the bars; [Encoding]: Remove the titles for the x and y axes; [Style]: Set the height and width of the chart to 300; [Style]: Set the color range for the bars to a gradient of blue; [Interaction]: Add a selection interaction that allows the user to pick a series from a dropdown menu; [Transform]: Filter the data based on the selected series.

Step 3. Instructions:
[View 1]; [Data]: Load the data from the URL ""https://raw.githubusercontent.com/RDeconomist/teaching2/main/cpiContributions.csv"" and format it as CSV; [Chart-Type]: Create a bar chart; [Mark]: Set the width of the bars to 3; [Encoding]: Map the ""Date"" field to the x-axis and the ""Value"" field to the y-axis; [Encoding]: Use the ""series"" field to color the bars; [Encoding]: Remove the titles for the x and y axes; [Style]: Set the height and width of the chart to 300; [Style]: Set the color range for the bars to a gradient of blue; [Interaction]: Add a selection interaction that allows the user to pick a category from a dropdown menu; [Transform]: Filter the data based on the selected category.","View #1:
Step 1. Primary Information: The chart type is a bar chart, the ""Date"" field is mapped to the x-axis, the ""Value"" field is mapped to the y-axis, and the ""series"" field is used to color the bars.
Step 2. Secondary Information: The titles for the x and y axes are removed.
Step 3. Command: Create a bar chart with ""Date"" on the x-axis, ""Value"" on the y-axis, and color the bars using the ""series"" field.
Step 4. Query: Bar chart of ""Value"" by ""Date"", color by ""series""
Step 5. Question: How does the ""Value"" vary by ""Date"" when colored by ""series"" in a bar chart?","View #1: [Chart-Type]: Create a bar chart; [Encoding]: Map the ""Date"" field to the x-axis and the ""Value"" field to the y-axis; [Encoding]: Use the ""series"" field to color the bars; [Encoding]: Remove the titles for the x and y axes","['The chart type is a bar chart, the ""Date"" field is mapped to the x-axis, the ""Value"" field is mapped to the y-axis, and the ""series"" field is used to color the bars.']",['The titles for the x and y axes are removed.'],"['Create a bar chart with ""Date"" on the x-axis, ""Value"" on the y-axis, and color the bars using the ""series"" field.']","['Bar chart of ""Value"" by ""Date"", color by ""series""']","['How does the ""Value"" vary by ""Date"" when colored by ""series"" in a bar chart?']"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL ""https://raw.githubusercontent.com/RDeconomist/prices/master/analysis/db_AdjustmentFrequency.csv"" in CSV format; [Transform]: Parse the ""date3"" field in the format ""%d-%m-%Y"" and store it as ""date4""; [Transform]: Filter the data to include only records where the ""year"" field is greater than 1989; [Transform]: Filter the data to include only records where the ""change_sh"" field is less than 0.4; [Chart-Type]: Create a point chart; [Mark]: Use points as marks with a color of ""rgba(0,67,167)"", a size of 90, and an opacity of 0.7; [Encoding]: Map the ""date4"" field to the x-axis with a temporal data type and a time unit of ""month"", and remove the title; [Encoding]: Map the ""change_sh"" field to the y-axis with a quantitative data type, remove the title, and set the scale domain to [0, 0.35]; [Encoding]: Map the ""change_sh"" field to the size channel with a condition that if the ""paintbrush"" selection is true, the value is 150, otherwise, the value is 90; [Encoding]: Add tooltips for the ""date4"" field with a temporal data type, a format of ""%b-%Y"", and a title of ""Date"", and for the ""change_sh"" field with a quantitative data type, a format of "",.1%"", and a title of ""Price changes""; [Interaction]: Add a multi-selection interaction named ""paintbrush"" that is triggered on mouseover and selects the nearest point; [Style]: Set the chart's height to 300 and width to 300, and add a title with the text ""Price flexibility, by month"", a subtitle of ""Share of prices changing month-on-month, 1990-2021"", a subtitle font style of ""italic"", a subtitle font size of 10, an anchor of ""start"", and a color of ""black"".

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL ""https://raw.githubusercontent.com/RDeconomist/prices/master/analysis/db_AdjustmentFrequency.csv"" in CSV format; [Transform]: Parse the ""date3"" field in the format ""%d-%m-%Y"" and store it as ""date4""; [Transform]: Filter the data to include only records where the ""year"" field is greater than 1989; [Transform]: Filter the data to include only records where the ""Price changes"" field is less than 0.4; [Chart-Type]: Create a point chart; [Mark]: Use points as marks with a color of ""rgba(0,67,167)"", a size of 90, and an opacity of 0.7; [Encoding]: Map the ""date4"" field to the x-axis with a temporal data type and a time unit of ""month"", and remove the title; [Encoding]: Map the ""Price changes"" field to the y-axis with a quantitative data type, remove the title, and set the scale domain to [0, 0.35]; [Encoding]: Map the ""Price changes"" field to the size channel with a condition that if the ""paintbrush"" selection is true, the value is 150, otherwise, the value is 90; [Encoding]: Add tooltips for the ""date4"" field with a temporal data type, a format of ""%b-%Y"", and a title of ""Date"", and for the ""Price changes"" field with a quantitative data type, a format of "",.1%"", and a title of ""Price changes""; [Interaction]: Add a multi-selection interaction named ""paintbrush"" that is triggered on mouseover and selects the nearest point; [Style]: Set the chart's height to 300 and width to 300, and add a title with the text ""Price flexibility, by month"", a subtitle of ""Share of prices changing month-on-month, 1990-2021"", a subtitle font style of ""italic"", a subtitle font size of 10, an anchor of ""start"", and a color of ""black"".","View #1:
Step 1. Primary Information: The chart is a point chart with ""date4"" field mapped to the x-axis and ""Price changes"" field mapped to the y-axis. The size of the points is determined by the ""Price changes"" field based on the ""paintbrush"" selection condition.
Step 2. Secondary Information: The x-axis is of temporal data type with a time unit of ""month"" and no title. The y-axis is of quantitative data type with a scale domain of [0, 0.35] and no title. Tooltips are added for the ""date4"" and ""Price changes"" fields.
Step 3. Command: Create a point chart with ""date4"" on the x-axis and ""Price changes"" on the y-axis, and size the points based on the ""Price changes"" field with the ""paintbrush"" selection condition.
Step 4. Query: Point chart of ""date4"" vs ""Price changes"", size by ""Price changes"" with ""paintbrush"" selection
Step 5. Question: How does the ""Price changes"" vary over the ""date4"" in the point chart with size determined by the ""Price changes"" field based on the ""paintbrush"" selection condition?","View #1: [Chart-Type]: Create a point chart; [Encoding]: Map the ""date4"" field to the x-axis with a temporal data type and a time unit of ""month"", and remove the title; [Encoding]: Map the ""Price changes"" field to the y-axis with a quantitative data type, remove the title, and set the scale domain to [0, 0.35]; [Encoding]: Map the ""Price changes"" field to the size channel with a condition that if the ""paintbrush"" selection is true, the value is 150, otherwise, the value is 90; [Encoding]: Add tooltips for the ""date4"" field with a temporal data type, a format of ""%b-%Y"", and a title of ""Date"", and for the ""Price changes"" field with a quantitative data type, a format of "",.1%"", and a title of ""Price changes""","['The chart is a point chart with ""date4"" field mapped to the x-axis and ""Price changes"" field mapped to the y-axis. The size of the points is determined by the ""Price changes"" field based on the ""paintbrush"" selection condition.']","['The x-axis is of temporal data type with a time unit of ""month"" and no title. The y-axis is of quantitative data type with a scale domain of [0, 0.35] and no title. Tooltips are added for the ""date4"" and ""Price changes"" fields.']","['Create a point chart with ""date4"" on the x-axis and ""Price changes"" on the y-axis, and size the points based on the ""Price changes"" field with the ""paintbrush"" selection condition.']","['Point chart of ""date4"" vs ""Price changes"", size by ""Price changes"" with ""paintbrush"" selection']","['How does the ""Price changes"" vary over the ""date4"" in the point chart with size determined by the ""Price changes"" field based on the ""paintbrush"" selection condition?']"
"Step 1. Composite Views:
- False

Step 2. Instructions:
[View 1]; [Data]: Load the dataset from the URL ""https://raw.githubusercontent.com/RDeconomist/prices/8357f5fba93bec983b3e606cee4ae40ecb0b4433/dbLatestRelease.csv""; [Chart-Type]: Create a scatter plot; [Mark]: Use circles as marks with an opacity of 0.8 and color them in rgb(0, 47, 167); [Encoding]: Map the ""down_sh"" field to the x-axis and the ""up_sh"" field to the y-axis. Both axes should be quantitative. The x-axis should have a title of ""Prices cut"" and the y-axis should have a title of ""Prices rising"". The x-axis should not have a grid and should start from zero, while the y-axis should not have a grid and should not start from zero; [Encoding]: Map the ""p"" field to the size of the marks. The size should be quantitative and have a title of ""Price"". The size legend should be oriented at the top-right and the size range should be from 20 to 500; [Encoding]: Map the ""name1"" field to the color of the marks. The color should be ordinal and have a title of ""Item type"". The color legend should be oriented at the bottom and have 2 columns. The color scheme should be ""set1""; [Encoding]: Add tooltips for the ""item_desc"", ""item_id"", and ""p"" fields. The tooltips should show the description, item ID, and price (median) respectively. The item ID and price should be formatted as integers, while the share rising and share falling should be formatted as percentages; [Style]: Set the height and width of the chart to 300; [Style]: Add a title to the chart with the text ""All items - price rises and cuts - [Hover for detail]"" and a subtitle ""Share of prices rising and falling for each consumer item"". The subtitle should be italic and have a font size of 10. The title should be anchored at the start and colored black; [Interaction]: Add a multi-selection interaction on mouseover that selects the nearest mark.

Step 3. Instructions:
[View 1]; [Data]: Load the dataset from the URL ""https://raw.githubusercontent.com/RDeconomist/prices/8357f5fba93bec983b3e606cee4ae40ecb0b4433/dbLatestRelease.csv""; [Chart-Type]: Create a scatter plot; [Mark]: Use circles as marks with an opacity of 0.8 and color them in rgb(0, 47, 167); [Encoding]: Map the ""Prices cut"" field to the x-axis and the ""Prices rising"" field to the y-axis. Both axes should be quantitative. The x-axis should have a title of ""Prices cut"" and the y-axis should have a title of ""Prices rising"". The x-axis should not have a grid and should start from zero, while the y-axis should not have a grid and should not start from zero; [Encoding]: Map the ""Price (median)"" field to the size of the marks. The size should be quantitative and have a title of ""Price"". The size legend should be oriented at the top-right and the size range should be from 20 to 500; [Encoding]: Map the ""Item type"" field to the color of the marks. The color should be ordinal and have a title of ""Item type"". The color legend should be oriented at the bottom and have 2 columns. The color scheme should be ""set1""; [Encoding]: Add tooltips for the ""Description"", ""Item ID"", and ""Price (median)"" fields. The tooltips should show the description, item ID, and price (median) respectively. The item ID and price should be formatted as integers, while the share rising and share falling should be formatted as percentages; [Style]: Set the height and width of the chart to 300; [Style]: Add a title to the chart with the text ""All items - price rises and cuts - [Hover for detail]"" and a subtitle ""Share of prices rising and falling for each consumer item"". The subtitle should be italic and have a font size of 10. The title should be anchored at the start and colored black; [Interaction]: Add a multi-selection interaction on mouseover that selects the nearest mark.","View #1:
Step 1. Primary Information: The scatter plot is mapping ""Prices cut"" to the x-axis and ""Prices rising"" to the y-axis. The size of the marks is determined by the ""Price (median)"" field and the color of the marks is determined by the ""Item type"" field.
Step 2. Secondary Information: The x-axis starts from zero and has a title of ""Prices cut"". The y-axis does not start from zero and has a title of ""Prices rising"". The size legend is oriented at the top-right and the size range is from 20 to 500. The color legend is oriented at the bottom and has 2 columns. The color scheme is ""set1"". Tooltips are added for the ""Description"", ""Item ID"", and ""Price (median)"" fields.
Step 3. Command: Create a scatter plot with ""Prices cut"" on the x-axis and ""Prices rising"" on the y-axis, size determined by ""Price (median)"" and color by ""Item type"".
Step 4. Query: Scatter plot of ""Prices cut"" vs ""Prices rising"", size by ""Price (median)"", color by ""Item type""
Step 5. Question: How does the ""Price (median)"" and ""Item type"" affect the relationship between ""Prices cut"" and ""Prices rising""?","View #1: [Chart-Type]: Create a scatter plot; [Encoding]: Map the ""Prices cut"" field to the x-axis and the ""Prices rising"" field to the y-axis. Both axes should be quantitative. The x-axis should have a title of ""Prices cut"" and the y-axis should have a title of ""Prices rising"". The x-axis should not have a grid and should start from zero, while the y-axis should not have a grid and should not start from zero; [Encoding]: Map the ""Price (median)"" field to the size of the marks. The size should be quantitative and have a title of ""Price"". The size legend should be oriented at the top-right and the size range should be from 20 to 500; [Encoding]: Map the ""Item type"" field to the color of the marks. The color should be ordinal and have a title of ""Item type"". The color legend should be oriented at the bottom and have 2 columns. The color scheme should be ""set1""; [Encoding]: Add tooltips for the ""Description"", ""Item ID"", and ""Price (median)"" fields. The tooltips should show the description, item ID, and price (median) respectively. The item ID and price should be formatted as integers, while the share rising and share falling should be formatted as percentages","['The scatter plot is mapping ""Prices cut"" to the x-axis and ""Prices rising"" to the y-axis. The size of the marks is determined by the ""Price (median)"" field and the color of the marks is determined by the ""Item type"" field.']","['The x-axis starts from zero and has a title of ""Prices cut"". The y-axis does not start from zero and has a title of ""Prices rising"". The size legend is oriented at the top-right and the size range is from 20 to 500. The color legend is oriented at the bottom and has 2 columns. The color scheme is ""set1"". Tooltips are added for the ""Description"", ""Item ID"", and ""Price (median)"" fields.']","['Create a scatter plot with ""Prices cut"" on the x-axis and ""Prices rising"" on the y-axis, size determined by ""Price (median)"" and color by ""Item type"".']","['Scatter plot of ""Prices cut"" vs ""Prices rising"", size by ""Price (median)"", color by ""Item type""']","['How does the ""Price (median)"" and ""Item type"" affect the relationship between ""Prices cut"" and ""Prices rising""?']"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: layered
- Number of plots: 2

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL 'https://raw.githubusercontent.com/RDeconomist/RDeconomist.github.io/main/charts/crypto/dataETH.csv'; [Chart-Type]: Create a line chart; [Mark]: Set the line mark type with no point and stroke width of 1; [Encoding]: Map 'Date' to the x-axis and 'Volume' to the y-axis; [Style]: Set the grid to false and label color to red for the y-axis; [Encoding]: Color the line based on 'Volume' with a color range from blue to red; [Style]: Place the color legend at the top left; [View 2]; [Chart-Type]: Create a line chart; [Mark]: Set the line mark type with no point and stroke width of 1; [Encoding]: Map 'Price' to the y-axis; [Style]: Set the grid to false and label color to blue for the y-axis; [Encoding]: Color the line based on 'Price' with a color range from orange to hotpink; [Style]: Place the color legend at the top left; [Interaction]: Ensure that the y-axis scales are independent for each view.

Step 3. Instructions:
[View 1]; [Data]: Load data from the provided URL; [Chart-Type]: Create a line chart; [Mark]: Set the line mark type with no point and stroke width of 1; [Encoding]: Map 'Date' to the x-axis and 'Volume' to the y-axis; [Style]: Set the grid to false and label color to red for the y-axis; [Encoding]: Color the line based on 'Volume' with a color range from blue to red; [Style]: Place the color legend at the top left; [View 2]; [Chart-Type]: Create a line chart; [Mark]: Set the line mark type with no point and stroke width of 1; [Encoding]: Map 'Price' to the y-axis; [Style]: Set the grid to false and label color to blue for the y-axis; [Encoding]: Color the line based on 'Price' with a color range from orange to hotpink; [Style]: Place the color legend at the top left; [Interaction]: Ensure that the y-axis scales are independent for each view.","View #1:
Step 1. Primary Information: The line chart is mapping 'Date' to the x-axis and 'Volume' to the y-axis.
Step 2. Secondary Information: The line is colored based on 'Volume' with a color range from blue to red.
Step 3. Command: Create a line chart with 'Date' on the x-axis and 'Volume' on the y-axis.
Step 4. Query: Line chart of 'Volume' by 'Date'
Step 5. Question: How does the 'Volume' change over 'Date'?

View #2:
Step 1. Primary Information: The line chart is mapping 'Price' to the y-axis.
Step 2. Secondary Information: The line is colored based on 'Price' with a color range from orange to hotpink.
Step 3. Command: Create a line chart with 'Price' on the y-axis.
Step 4. Query: Line chart of 'Price'
Step 5. Question: How does the 'Price' change?",View #1: [Chart-Type]: Create a line chart; [Encoding]: Map 'Date' to the x-axis and 'Volume' to the y-axis; [Encoding]: Color the line based on 'Volume' with a color range from blue to red; [Chart-Type]: Create a line chart; [Encoding]: Map 'Price' to the y-axis; [Encoding]: Color the line based on 'Price' with a color range from orange to hotpink,"[""The line chart is mapping 'Date' to the x-axis and 'Volume' to the y-axis."", ""The line chart is mapping 'Price' to the y-axis.""]","[""The line is colored based on 'Volume' with a color range from blue to red."", ""The line is colored based on 'Price' with a color range from orange to hotpink.""]","[""Create a line chart with 'Date' on the x-axis and 'Volume' on the y-axis."", ""Create a line chart with 'Price' on the y-axis.""]","[""Line chart of 'Volume' by 'Date'"", ""Line chart of 'Price'""]","[""How does the 'Volume' change over 'Date'?"", ""How does the 'Price' change?""]"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL https://raw.githubusercontent.com/MW17668/MW17668.github.io/main/myDataJuly1.csv; [Chart-Type]: Choose a bar chart as the chart type; [Mark]: Use bars to represent the data; [Encoding]: Encode the 'Entity' field to the y-axis and sort it in descending order of the 'food_emissions' field; [Encoding]: Encode the 'food_emissions' field to the x-axis; [Encoding]: Encode the 'Type' field to the color of the bars and use a color scheme of 'yellowgreenblue'; [Style]: Set the width of the chart to 250 and the height to 300; [Style]: Add a title ""Food - CO2 greenhouse gas emissions"" and a subtitle ""Kg of CO2 emitted per kg of food, source: Our World in Data"" in italic font style and font size 10, anchor the title to the start and color it black; [Style]: Position the legend of the 'Type' field to the bottom-right of the chart.

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL https://raw.githubusercontent.com/MW17668/MW17668.github.io/main/myDataJuly1.csv; [Chart-Type]: Choose a bar chart as the chart type; [Mark]: Use bars to represent the data; [Encoding]: Encode the 'Entity' field to the y-axis and sort it in descending order of the 'food_emissions' field; [Encoding]: Encode the 'food_emissions' field to the x-axis; [Encoding]: Encode the 'Type' (Emissions from:) field to the color of the bars and use a color scheme of 'yellowgreenblue'; [Style]: Set the width of the chart to 250 and the height to 300; [Style]: Add a title ""Food - CO2 greenhouse gas emissions"" and a subtitle ""Kg of CO2 emitted per kg of food, source: Our World in Data"" in italic font style and font size 10, anchor the title to the start and color it black; [Style]: Position the legend of the 'Type' (Emissions from:) field to the bottom-right of the chart.","View #1:
Step 1. Primary Information: The primary information is the 'Entity' and 'food_emissions' fields.
Step 2. Secondary Information: The secondary information is the 'Type' (Emissions from:) field and the color scheme 'yellowgreenblue'.
Step 3. Command: Create a bar chart with 'Entity' on the y-axis and 'food_emissions' on the x-axis.
Step 4. Query: 'Entity', 'food_emissions', order by 'food_emissions' descending
Step 5. Question: What is the distribution of food emissions across different entities?",View #1: [Chart-Type]: Choose a bar chart as the chart type; [Encoding]: Encode the 'Entity' field to the y-axis and sort it in descending order of the 'food_emissions' field; [Encoding]: Encode the 'food_emissions' field to the x-axis; [Encoding]: Encode the 'Type' (Emissions from:) field to the color of the bars and use a color scheme of 'yellowgreenblue',"[""The primary information is the 'Entity' and 'food_emissions' fields.""]","[""The secondary information is the 'Type' (Emissions from:) field and the color scheme 'yellowgreenblue'.""]","[""Create a bar chart with 'Entity' on the y-axis and 'food_emissions' on the x-axis.""]","[""'Entity', 'food_emissions', order by 'food_emissions' descending""]",['What is the distribution of food emissions across different entities?']
"Step 1. Composite Views:
- True/False: True
- (If True) Type: layered
- Number of plots: 9

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL ""https://raw.githubusercontent.com/RDeconomist/RDeconomist.github.io/main/charts/extreme/data_Glasgow_ScottishDrugDeaths.csv""; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'All' field to the y-axis; [Style]: Set the color of the line based on the 'All' field; [Interaction]: None <%>
[View 2]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Heroin' field to the y-axis; [Style]: Set the color of the line based on the 'Heroin' field; [Interaction]: None <%>
[View 3]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Methadone' field to the y-axis; [Style]: Set the color of the line based on the 'Methadone' field; [Interaction]: None <%>
[View 4]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Benzodiazepines' field to the y-axis; [Style]: Set the color of the line based on the 'Benzodiazepines' field; [Interaction]: None <%>
[View 5]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Gabapentin/Pregabalin' field to the y-axis; [Style]: Set the color of the line based on the 'Gabapentin/Pregabalin' field; [Interaction]: None <%>
[View 6]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Cocaine' field to the y-axis; [Style]: Set the color of the line based on the 'Cocaine' field; [Interaction]: None <%>
[View 7]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Ectasy' field to the y-axis; [Style]: Set the color of the line based on the 'Ectasy' field; [Interaction]: None <%>
[View 8]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Amphetamines' field to the y-axis; [Style]: Set the color of the line based on the 'Amphetamines' field; [Interaction]: None <%>
[View 9]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Alcohol' field to the y-axis; [Style]: Set the color of the line based on the 'Alcohol' field; [Interaction]: None

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL ""https://raw.githubusercontent.com/RDeconomist/RDeconomist.github.io/main/charts/extreme/data_Glasgow_ScottishDrugDeaths.csv""; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'All' field to the y-axis; [Style]: Set the color of the line based on the 'All' field; [Interaction]: None <%>
[View 2]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Heroin' field to the y-axis; [Style]: Set the color of the line based on the 'Heroin' field; [Interaction]: None <%>
[View 3]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Methadone' field to the y-axis; [Style]: Set the color of the line based on the 'Methadone' field; [Interaction]: None <%>
[View 4]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Benzodiazepines' field to the y-axis; [Style]: Set the color of the line based on the 'Benzodiazepines' field; [Interaction]: None <%>
[View 5]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Gabapentin/Pregabalin' field to the y-axis; [Style]: Set the color of the line based on the 'Gabapentin/Pregabalin' field; [Interaction]: None <%>
[View 6]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Cocaine' field to the y-axis; [Style]: Set the color of the line based on the 'Cocaine' field; [Interaction]: None <%>
[View 7]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Ectasy' field to the y-axis; [Style]: Set the color of the line based on the 'Ectasy' field; [Interaction]: None <%>
[View 8]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Amphetamines' field to the y-axis; [Style]: Set the color of the line based on the 'Amphetamines' field; [Interaction]: None <%>
[View 9]; [Data]: Use the same data as in View 1; [Chart-Type]: Create a line chart; [Mark]: Mark the data points on the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Alcohol' field to the y-axis; [Style]: Set the color of the line based on the 'Alcohol' field; [Interaction]: None","View #1:
Step 1. Primary Information: Line chart with 'Year' on x-axis and 'All' on y-axis
Step 2. Secondary Information: None
Step 3. Command: Create a line chart with 'Year' on x-axis and 'All' on y-axis.
Step 4. Query: Line chart, Year, All
Step 5. Question: What is the trend of 'All' over the years?

View #2:
Step 1. Primary Information: Line chart with 'Year' on x-axis and 'Heroin' on y-axis
Step 2. Secondary Information: None
Step 3. Command: Create a line chart with 'Year' on x-axis and 'Heroin' on y-axis.
Step 4. Query: Line chart, Year, Heroin
Step 5. Question: What is the trend of 'Heroin' over the years?

View #3:
Step 1. Primary Information: Line chart with 'Year' on x-axis and 'Methadone' on y-axis
Step 2. Secondary Information: None
Step 3. Command: Create a line chart with 'Year' on x-axis and 'Methadone' on y-axis.
Step 4. Query: Line chart, Year, Methadone
Step 5. Question: What is the trend of 'Methadone' over the years?

View #4:
Step 1. Primary Information: Line chart with 'Year' on x-axis and 'Benzodiazepines' on y-axis
Step 2. Secondary Information: None
Step 3. Command: Create a line chart with 'Year' on x-axis and 'Benzodiazepines' on y-axis.
Step 4. Query: Line chart, Year, Benzodiazepines
Step 5. Question: What is the trend of 'Benzodiazepines' over the years?

View #5:
Step 1. Primary Information: Line chart with 'Year' on x-axis and 'Gabapentin/Pregabalin' on y-axis
Step 2. Secondary Information: None
Step 3. Command: Create a line chart with 'Year' on x-axis and 'Gabapentin/Pregabalin' on y-axis.
Step 4. Query: Line chart, Year, Gabapentin/Pregabalin
Step 5. Question: What is the trend of 'Gabapentin/Pregabalin' over the years?

View #6:
Step 1. Primary Information: Line chart with 'Year' on x-axis and 'Cocaine' on y-axis
Step 2. Secondary Information: None
Step 3. Command: Create a line chart with 'Year' on x-axis and 'Cocaine' on y-axis.
Step 4. Query: Line chart, Year, Cocaine
Step 5. Question: What is the trend of 'Cocaine' over the years?

View #7:
Step 1. Primary Information: Line chart with 'Year' on x-axis and 'Ectasy' on y-axis
Step 2. Secondary Information: None
Step 3. Command: Create a line chart with 'Year' on x-axis and 'Ectasy' on y-axis.
Step 4. Query: Line chart, Year, Ectasy
Step 5. Question: What is the trend of 'Ectasy' over the years?

View #8:
Step 1. Primary Information: Line chart with 'Year' on x-axis and 'Amphetamines' on y-axis
Step 2. Secondary Information: None
Step 3. Command: Create a line chart with 'Year' on x-axis and 'Amphetamines' on y-axis.
Step 4. Query: Line chart, Year, Amphetamines
Step 5. Question: What is the trend of 'Amphetamines' over the years?

View #9:
Step 1. Primary Information: Line chart with 'Year' on x-axis and 'Alcohol' on y-axis
Step 2. Secondary Information: None
Step 3. Command: Create a line chart with 'Year' on x-axis and 'Alcohol' on y-axis.
Step 4. Query: Line chart, Year, Alcohol
Step 5. Question: What is the trend of 'Alcohol' over the years?","View #1: [Chart-Type]: Create a line chart; [Encoding]: Map the 'Year' field to the x-axis and the 'All' field to the y-axis
View #2: [Chart-Type]: Create a line chart; [Encoding]: Map the 'Year' field to the x-axis and the 'Heroin' field to the y-axis
View #3: [Chart-Type]: Create a line chart; [Encoding]: Map the 'Year' field to the x-axis and the 'Methadone' field to the y-axis
View #4: [Chart-Type]: Create a line chart; [Encoding]: Map the 'Year' field to the x-axis and the 'Benzodiazepines' field to the y-axis
View #5: [Chart-Type]: Create a line chart; [Encoding]: Map the 'Year' field to the x-axis and the 'Gabapentin/Pregabalin' field to the y-axis
View #6: [Chart-Type]: Create a line chart; [Encoding]: Map the 'Year' field to the x-axis and the 'Cocaine' field to the y-axis
View #7: [Chart-Type]: Create a line chart; [Encoding]: Map the 'Year' field to the x-axis and the 'Ectasy' field to the y-axis
View #8: [Chart-Type]: Create a line chart; [Encoding]: Map the 'Year' field to the x-axis and the 'Amphetamines' field to the y-axis
View #9: [Chart-Type]: Create a line chart; [Encoding]: Map the 'Year' field to the x-axis and the 'Alcohol' field to the y-axis","[""Line chart with 'Year' on x-axis and 'All' on y-axis"", ""Line chart with 'Year' on x-axis and 'Heroin' on y-axis"", ""Line chart with 'Year' on x-axis and 'Methadone' on y-axis"", ""Line chart with 'Year' on x-axis and 'Benzodiazepines' on y-axis"", ""Line chart with 'Year' on x-axis and 'Gabapentin/Pregabalin' on y-axis"", ""Line chart with 'Year' on x-axis and 'Cocaine' on y-axis"", ""Line chart with 'Year' on x-axis and 'Ectasy' on y-axis"", ""Line chart with 'Year' on x-axis and 'Amphetamines' on y-axis"", ""Line chart with 'Year' on x-axis and 'Alcohol' on y-axis""]","['None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None']","[""Create a line chart with 'Year' on x-axis and 'All' on y-axis."", ""Create a line chart with 'Year' on x-axis and 'Heroin' on y-axis."", ""Create a line chart with 'Year' on x-axis and 'Methadone' on y-axis."", ""Create a line chart with 'Year' on x-axis and 'Benzodiazepines' on y-axis."", ""Create a line chart with 'Year' on x-axis and 'Gabapentin/Pregabalin' on y-axis."", ""Create a line chart with 'Year' on x-axis and 'Cocaine' on y-axis."", ""Create a line chart with 'Year' on x-axis and 'Ectasy' on y-axis."", ""Create a line chart with 'Year' on x-axis and 'Amphetamines' on y-axis."", ""Create a line chart with 'Year' on x-axis and 'Alcohol' on y-axis.""]","['Line chart, Year, All', 'Line chart, Year, Heroin', 'Line chart, Year, Methadone', 'Line chart, Year, Benzodiazepines', 'Line chart, Year, Gabapentin/Pregabalin', 'Line chart, Year, Cocaine', 'Line chart, Year, Ectasy', 'Line chart, Year, Amphetamines', 'Line chart, Year, Alcohol']","[""What is the trend of 'All' over the years?"", ""What is the trend of 'Heroin' over the years?"", ""What is the trend of 'Methadone' over the years?"", ""What is the trend of 'Benzodiazepines' over the years?"", ""What is the trend of 'Gabapentin/Pregabalin' over the years?"", ""What is the trend of 'Cocaine' over the years?"", ""What is the trend of 'Ectasy' over the years?"", ""What is the trend of 'Amphetamines' over the years?"", ""What is the trend of 'Alcohol' over the years?""]"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: multiple views
- Number of plots: 3

Step 2. Instructions:
[View 1]; [Data]: Load the world_countries.geojson data from the provided URL and name it as 'map'; [Transform]: Filter out the data where 'ISO3' is not equal to 'AQ'; [Projection]: Use the 'naturalEarth1' projection type with a translate of [-630, 220] and a scale of 480; [Mark]: Use 'geoshape' as the mark type with a fill color of 'lightgray', stroke color of 'white', and stroke width of 0.5; [Encoding]: Add a tooltip to display the 'COUNTRY' property from the 'properties' field; [Data]: Load the Global_WageIndicator_shoeFactories.csv data from the provided URL and name it as 'locations'; [Projection]: Use the 'naturalEarth1' projection type with a translate of [275, 175] and a scale of 300; [Mark]: Use 'circle' as the mark type; [Encoding]: Map 'Longitude' to the longitude, 'Latitude' to the latitude, 'number' to the size with a scale range of [10, 100], and 'brand' to the color with a scale range of ['#c41e3a', '#005147']; [Encoding]: Add a tooltip to display the 'country', 'location2', 'number' (formatted with ','), and 'brand'; [Style]: Set the width and height of the chart to 300; [Style]: Add a title 'Mapping the garment supply chain' with a subtitle '25 Largest Shoe Factories', subtitle font style as 'italic', subtitle font size as 10, anchor as 'start', and color as 'black' <%>
[View 2]; [Data]: Load the map_VNM_regions.geojson data from the provided URL; [Projection]: Use the 'mercator' projection type with a center of [104, 14.5] and a scale of 1800; [Mark]: Use 'geoshape' as the mark type with a fill color of 'slategrey', fill opacity of 0.6, stroke color of 'white', and stroke width of 0.5; [Encoding]: Add a tooltip to display the 'Name' property from the 'properties' field; [Data]: Use the 'map' data; [Transform]: Filter the data where 'ISO3' is one of ['LAO', 'KHM', 'THA']; [Mark]: Use 'geoshape' as the mark type with a fill color of 'lightgray', stroke color of 'white', and stroke width of 0.5; [Encoding]: Add a tooltip to display the 'COUNTRY' property from the 'properties' field; [Data]: Use the 'locations' data; [Transform]: Filter the data where 'ISO3' is equal to 'VNM'; [Mark]: Use 'circle' as the mark type with a fill opacity of 1; [Encoding]: Map 'Longitude' to the longitude, 'Latitude' to the latitude, 'number' to the size with a scale range of [10, 100], and 'brand' to the color; [Encoding]: Add a tooltip to display the 'country', 'location2', 'number' (formatted with ','), and 'brand'; [Style]: Set the width of the chart to 200 and the height to 160; [Style]: Add a title 'Vietnam' with a font size of 12 and font weight of 400 <%>
[View 3]; [Data]: Load the map_IDN_regions.geojson data from the provided URL; [Projection]: Use the 'identity' projection type with a reflectY of True, translate of [-5580, -300], and scale of 53; [Mark]: Use 'geoshape' as the mark type with a fill color of 'slategray', fill opacity of 0.6, stroke color of 'white', and stroke width of 0.5; [Encoding]: Add a tooltip to display the 'Propinsi' property from the 'properties' field; [Data]: Use the 'locations' data; [Transform]: Filter the data where 'ISO3' is equal to 'IDN'; [Projection]: Use the 'identity' projection type with a reflectY of True and a scale of 100; [Mark]: Use 'circle' as the mark type; [Encoding]: Map 'Longitude' to the longitude, 'Latitude' to the latitude, 'number' to the size with a scale range of [10, 100], and 'brand' to the color; [Encoding]: Add a tooltip to display the 'country', 'location2', 'number' (formatted with ','), and 'brand'; [Style]: Set the width of the chart to 200 and the height to 120; [Style]: Add a title 'Indonesia' with a font size of 12, font weight of 400, and offset of -5.

Step 3. Instructions:
[View 1]; [Data]: Load the world_countries.geojson data from the provided URL and name it as 'map'; [Transform]: Filter out the data where 'ISO3' is not equal to 'AQ'; [Projection]: Use the 'naturalEarth1' projection type with a translate of [-630, 220] and a scale of 480; [Mark]: Use 'geoshape' as the mark type with a fill color of 'lightgray', stroke color of 'white', and stroke width of 0.5; [Encoding]: Add a tooltip to display the 'COUNTRY' property from the 'properties' field; [Data]: Load the Global_WageIndicator_shoeFactories.csv data from the provided URL and name it as 'locations'; [Projection]: Use the 'naturalEarth1' projection type with a translate of [275, 175] and a scale of 300; [Mark]: Use 'circle' as the mark type; [Encoding]: Map 'Longitude' to the longitude, 'Latitude' to the latitude, 'Workers' to the size with a scale range of [10, 100], and 'Brand' to the color with a scale range of ['#c41e3a', '#005147']; [Encoding]: Add a tooltip to display the 'Country', 'Region', 'Workers' (formatted with ','), and 'Brand'; [Style]: Set the width and height of the chart to 300; [Style]: Add a title 'Mapping the garment supply chain' with a subtitle '25 Largest Shoe Factories', subtitle font style as 'italic', subtitle font size as 10, anchor as 'start', and color as 'black' <%>
[View 2]; [Data]: Load the map_VNM_regions.geojson data from the provided URL; [Projection]: Use the 'mercator' projection type with a center of [104, 14.5] and a scale of 1800; [Mark]: Use 'geoshape' as the mark type with a fill color of 'slategrey', fill opacity of 0.6, stroke color of 'white', and stroke width of 0.5; [Encoding]: Add a tooltip to display the 'Name' property from the 'properties' field; [Data]: Use the 'map' data; [Transform]: Filter the data where 'ISO3' is one of ['LAO', 'KHM', 'THA']; [Mark]: Use 'geoshape' as the mark type with a fill color of 'lightgray', stroke color of 'white', and stroke width of 0.5; [Encoding]: Add a tooltip to display the 'COUNTRY' property from the 'properties' field; [Data]: Use the 'locations' data; [Transform]: Filter the data where 'ISO3' is equal to 'VNM'; [Mark]: Use 'circle' as the mark type with a fill opacity of 1; [Encoding]: Map 'Longitude' to the longitude, 'Latitude' to the latitude, 'Workers' to the size with a scale range of [10, 100], and 'Brand' to the color; [Encoding]: Add a tooltip to display the 'Country', 'Region', 'Workers' (formatted with ','), and 'Brand'; [Style]: Set the width of the chart to 200 and the height to 160; [Style]: Add a title 'Vietnam' with a font size of 12 and font weight of 400 <%>
[View 3]; [Data]: Load the map_IDN_regions.geojson data from the provided URL; [Projection]: Use the 'identity' projection type with a reflectY of True, translate of [-5580, -300], and scale of 53; [Mark]: Use 'geoshape' as the mark type with a fill color of 'slategray', fill opacity of 0.6, stroke color of 'white', and stroke width of 0.5; [Encoding]: Add a tooltip to display the 'Propinsi' property from the 'properties' field; [Data]: Use the 'locations' data; [Transform]: Filter the data where 'ISO3' is equal to 'IDN'; [Projection]: Use the 'identity' projection type with a reflectY of True and a scale of 100; [Mark]: Use 'circle' as the mark type; [Encoding]: Map 'Longitude' to the longitude, 'Latitude' to the latitude, 'Workers' to the size with a scale range of [10, 100], and 'Brand' to the color; [Encoding]: Add a tooltip to display the 'Country', 'Region', 'Workers' (formatted with ','), and 'Brand'; [Style]: Set the width of the chart to 200 and the height to 120; [Style]: Add a title 'Indonesia' with a font size of 12, font weight of 400, and offset of -5.","View #1:
Step 1. Primary Information: The 'COUNTRY' property from the 'properties' field, 'Longitude', 'Latitude', 'Workers', and 'Brand'.
Step 2. Secondary Information: Tooltip to display the 'Country', 'Region', 'Workers', and 'Brand'.
Step 3. Command: Map 'Longitude' to longitude, 'Latitude' to latitude, 'Workers' to size with a scale range of [10, 100], and 'Brand' to color with a scale range of ['#c41e3a', '#005147'].
Step 4. Query: 'COUNTRY' property from 'properties' field, 'Longitude', 'Latitude', 'Workers', 'Brand'
Step 5. Question: What is the distribution of workers by brand in each country?

View #2:
Step 1. Primary Information: The 'Name' and 'COUNTRY' properties from the 'properties' field, 'Longitude', 'Latitude', 'Workers', and 'Brand'.
Step 2. Secondary Information: Tooltip to display the 'Country', 'Region', 'Workers', and 'Brand'.
Step 3. Command: Map 'Longitude' to longitude, 'Latitude' to latitude, 'Workers' to size with a scale range of [10, 100], and 'Brand' to color.
Step 4. Query: 'Name', 'COUNTRY' property from 'properties' field, 'Longitude', 'Latitude', 'Workers', 'Brand'
Step 5. Question: What is the distribution of workers by brand and location name in each country?

View #3:
Step 1. Primary Information: The 'Propinsi' property from the 'properties' field, 'Longitude', 'Latitude', 'Workers', and 'Brand'.
Step 2. Secondary Information: Tooltip to display the 'Country', 'Region', 'Workers', and 'Brand'.
Step 3. Command: Map 'Longitude' to longitude, 'Latitude' to latitude, 'Workers' to size with a scale range of [10, 100], and 'Brand' to color.
Step 4. Query: 'Propinsi' property from 'properties' field, 'Longitude', 'Latitude', 'Workers', 'Brand'
Step 5. Question: What is the distribution of workers by brand in each province?","View #1: [Encoding]: Add a tooltip to display the 'COUNTRY' property from the 'properties' field; [Encoding]: Map 'Longitude' to the longitude, 'Latitude' to the latitude, 'Workers' to the size with a scale range of [10, 100], and 'Brand' to the color with a scale range of ['#c41e3a', '#005147']; [Encoding]: Add a tooltip to display the 'Country', 'Region', 'Workers' (formatted with ','), and 'Brand'
View #2: [Encoding]: Add a tooltip to display the 'Name' property from the 'properties' field; [Encoding]: Add a tooltip to display the 'COUNTRY' property from the 'properties' field; [Encoding]: Map 'Longitude' to the longitude, 'Latitude' to the latitude, 'Workers' to the size with a scale range of [10, 100], and 'Brand' to the color; [Encoding]: Add a tooltip to display the 'Country', 'Region', 'Workers' (formatted with ','), and 'Brand'
View #3: [Encoding]: Add a tooltip to display the 'Propinsi' property from the 'properties' field; [Encoding]: Map 'Longitude' to the longitude, 'Latitude' to the latitude, 'Workers' to the size with a scale range of [10, 100], and 'Brand' to the color; [Encoding]: Add a tooltip to display the 'Country', 'Region', 'Workers' (formatted with ','), and 'Brand'","[""The 'COUNTRY' property from the 'properties' field, 'Longitude', 'Latitude', 'Workers', and 'Brand'."", ""The 'Name' and 'COUNTRY' properties from the 'properties' field, 'Longitude', 'Latitude', 'Workers', and 'Brand'."", ""The 'Propinsi' property from the 'properties' field, 'Longitude', 'Latitude', 'Workers', and 'Brand'.""]","[""Tooltip to display the 'Country', 'Region', 'Workers', and 'Brand'."", ""Tooltip to display the 'Country', 'Region', 'Workers', and 'Brand'."", ""Tooltip to display the 'Country', 'Region', 'Workers', and 'Brand'.""]","[""Map 'Longitude' to longitude, 'Latitude' to latitude, 'Workers' to size with a scale range of [10, 100], and 'Brand' to color with a scale range of ['#c41e3a', '#005147']."", ""Map 'Longitude' to longitude, 'Latitude' to latitude, 'Workers' to size with a scale range of [10, 100], and 'Brand' to color."", ""Map 'Longitude' to longitude, 'Latitude' to latitude, 'Workers' to size with a scale range of [10, 100], and 'Brand' to color.""]","[""'COUNTRY' property from 'properties' field, 'Longitude', 'Latitude', 'Workers', 'Brand'"", ""'Name', 'COUNTRY' property from 'properties' field, 'Longitude', 'Latitude', 'Workers', 'Brand'"", ""'Propinsi' property from 'properties' field, 'Longitude', 'Latitude', 'Workers', 'Brand'""]","['What is the distribution of workers by brand in each country?', 'What is the distribution of workers by brand and location name in each country?', 'What is the distribution of workers by brand in each province?']"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL 'https://raw.githubusercontent.com/maddyht20/maddyht20.github.io/main/US%20Migration%205%20CSV.csv'; [Chart-Type]: Create a bar chart; [Mark]: Use bars to represent data; [Encoding]: Map 'State' to the y-axis and sort it in ascending order based on the sum of 'ValueC'; [Encoding]: Map the sum of 'ValueC' to the x-axis with the title 'Migration as % of State Population'; [Encoding]: Use 'Type1' to color the bars and place the legend at the bottom with no title; [Encoding]: Add a tooltip that shows 'ValueC' as 'Migration as % of State Population' when hovering over a bar; [Style]: Set the width and height of the chart to 600; [Style]: Add a title 'Total Immigrants by State as percentage of population' and a subtitle 'Source: Homeland Security' at the start of the chart.

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL 'https://raw.githubusercontent.com/maddyht20/maddyht20.github.io/main/US%20Migration%205%20CSV.csv'; [Chart-Type]: Create a bar chart; [Mark]: Use bars to represent data; [Encoding]: Map 'State' to the y-axis and sort it in ascending order based on the sum of 'Migration as % of State Population'; [Encoding]: Map the sum of 'Migration as % of State Population' to the x-axis with the title 'Migration as % of State Population'; [Encoding]: Use 'Type1' to color the bars and place the legend at the bottom with no title; [Encoding]: Add a tooltip that shows 'Migration as % of State Population' when hovering over a bar; [Style]: Set the width and height of the chart to 600; [Style]: Add a title 'Total Immigrants by State as percentage of population' and a subtitle 'Source: Homeland Security' at the start of the chart.","View #1:
Step 1. Primary Information: The bar chart represents the sum of 'Migration as % of State Population' for each state, sorted in ascending order.
Step 2. Secondary Information: The bars are colored based on 'Type1' and a tooltip shows 'Migration as % of State Population' when hovering over a bar.
Step 3. Command: Create a bar chart showing the sum of 'Migration as % of State Population' for each state, sorted in ascending order.
Step 4. Query: Sum of 'Migration as % of State Population' by State, order ascending
Step 5. Question: What is the sum of 'Migration as % of State Population' for each state when sorted in ascending order?",View #1: [Chart-Type]: Create a bar chart; [Encoding]: Map 'State' to the y-axis and sort it in ascending order based on the sum of 'Migration as % of State Population'; [Encoding]: Map the sum of 'Migration as % of State Population' to the x-axis with the title 'Migration as % of State Population'; [Encoding]: Use 'Type1' to color the bars and place the legend at the bottom with no title; [Encoding]: Add a tooltip that shows 'Migration as % of State Population' when hovering over a bar,"[""The bar chart represents the sum of 'Migration as % of State Population' for each state, sorted in ascending order.""]","[""The bars are colored based on 'Type1' and a tooltip shows 'Migration as % of State Population' when hovering over a bar.""]","[""Create a bar chart showing the sum of 'Migration as % of State Population' for each state, sorted in ascending order.""]","[""Sum of 'Migration as % of State Population' by State, order ascending""]","[""What is the sum of 'Migration as % of State Population' for each state when sorted in ascending order?""]"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL ""https://raw.githubusercontent.com/RDeconomist/RDeconomist.github.io/main/charts/e4e/Global_WB_GDPperCapita.csv""; [Transform]: Fold the data fields 'COD', 'CAF', 'HTI', 'MDG', 'NER', 'WLD' into 'country' and 'GDPpc'; [Chart-Type]: Create a line chart; [Mark]: Set the line stroke width to 2; [Encoding]: Map 'year' to the x-axis and 'GDPpc' to the y-axis; [Encoding]: Map 'country' to color with a range of 'green', 'orange', 'red', 'blue', 'pink', 'black'; [Encoding]: Create a legend for 'country' with labels 'Congo Dem Rep', 'Haiti', 'Niger', 'Central African Republic', 'Madagascar', 'World'; [Style]: Set the title to 'What went so wrong?' with a subtitle 'GDP per capital. 1960=1, Source: WB.'; [Style]: Set the height of the chart to 300 and the width to 200; [Style]: Remove grid lines from the x-axis and set the grid opacity of the y-axis to 0.3.

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL ""https://raw.githubusercontent.com/RDeconomist/RDeconomist.github.io/main/charts/e4e/Global_WB_GDPperCapita.csv""; [Transform]: Fold the data fields 'COD', 'CAF', 'HTI', 'MDG', 'NER', 'WLD' into 'country' and 'GDPpc'; [Chart-Type]: Create a line chart; [Mark]: Set the line stroke width to 2; [Encoding]: Map 'year' to the x-axis and 'GDPpc' to the y-axis; [Encoding]: Map 'country' to color with a range of 'green', 'orange', 'red', 'blue', 'pink', 'black'; [Encoding]: Create a legend for 'country' with labels 'Congo Dem Rep', 'Haiti', 'Niger', 'Central African Republic', 'Madagascar', 'World'; [Style]: Set the title to 'What went so wrong?' with a subtitle 'GDP per capital. 1960=1, Source: WB.'; [Style]: Set the height of the chart to 300 and the width to 200; [Style]: Remove grid lines from the x-axis and set the grid opacity of the y-axis to 0.3.","View #1:
Step 1. Primary Information: The line chart represents the GDP per capita (GDPpc) over the years for different countries.
Step 2. Secondary Information: The countries represented are 'Congo Dem Rep', 'Haiti', 'Niger', 'Central African Republic', 'Madagascar', and 'World'. They are differentiated by colors 'green', 'orange', 'red', 'blue', 'pink', 'black'.
Step 3. Command: Create a line chart with 'year' on the x-axis and 'GDPpc' on the y-axis.
Step 4. Query: 'year', 'GDPpc', 'country'
Step 5. Question: How does the GDP per capita change over the years for different countries?","View #1: [Chart-Type]: Create a line chart; [Encoding]: Map 'year' to the x-axis and 'GDPpc' to the y-axis; [Encoding]: Map 'country' to color with a range of 'green', 'orange', 'red', 'blue', 'pink', 'black'; [Encoding]: Create a legend for 'country' with labels 'Congo Dem Rep', 'Haiti', 'Niger', 'Central African Republic', 'Madagascar', 'World'",['The line chart represents the GDP per capita (GDPpc) over the years for different countries.'],"[""The countries represented are 'Congo Dem Rep', 'Haiti', 'Niger', 'Central African Republic', 'Madagascar', and 'World'. They are differentiated by colors 'green', 'orange', 'red', 'blue', 'pink', 'black'.""]","[""Create a line chart with 'year' on the x-axis and 'GDPpc' on the y-axis.""]","[""'year', 'GDPpc', 'country'""]",['How does the GDP per capita change over the years for different countries?']
"Step 1. Composite Views:
- True/False: True
- (If True) Type: multiple views
- Number of plots: 2

Step 2. Instructions:
[View 1]; [Data]: Load the dataset from the provided URL; [Transform]: Filter the data where the tourney_level is 'Total'; [Transform]: Group the data by winner_name and img, and calculate the sum of Wins as 'Total Wins'; [Mark]: Use a bar mark for the visualization; [Encoding]: Map the 'Total Wins' field to the x-axis and the 'winner_name' field to the y-axis; [Encoding]: Use the 'winner_name' field to color the bars; [Interaction]: Add a point selection interaction on the y-axis encoding; [Mark]: Add an image mark to the visualization; [Encoding]: Map the 'xAxis' field to the x-axis and the 'winner_name' field to the y-axis; [Encoding]: Use the 'img' field for the URL of the image; [Mark]: Add a text mark to the visualization; [Encoding]: Map the 'Total Wins' field to the x-axis and the 'winner_name' field to the y-axis; [Encoding]: Use the 'Total Wins' field for the text of the mark; [Mark]: Add another text mark to the visualization; [Encoding]: Map the 'Zero' field to the x-axis and the 'winner_name' field to the y-axis; [Encoding]: Use the 'winner_name' field for the text of the mark <%>
[View 2]; [Data]: Load the dataset from the provided URL; [Transform]: Filter the data where the tourney_level is equal to the selected tourney level; [Transform]: Filter the data based on the selected player name; [Mark]: Use a line mark for the visualization; [Encoding]: Map the 'year' field to the x-axis and the 'Wins' field to the y-axis; [Encoding]: Use the 'winner_name' field to color the line; [Mark]: Add a text mark to the visualization; [Encoding]: Map the 'year' field to the x-axis and the 'Wins' field to the y-axis; [Encoding]: Use the 'Wins' field for the text of the mark; [Encoding]: Use the 'winner_name' field to color the text mark.

Step 3. Instructions:
[View 1]; [Data]: Load the dataset from the provided URL; [Transform]: Filter the data where the tourney_level is 'Total'; [Transform]: Group the data by Player Name and img, and calculate the sum of Wins as 'Total Wins'; [Mark]: Use a bar mark for the visualization; [Encoding]: Map the 'Total Wins' field to the x-axis and the 'Player Name' field to the y-axis; [Encoding]: Use the 'Player Name' field to color the bars; [Interaction]: Add a point selection interaction on the y-axis encoding; [Mark]: Add an image mark to the visualization; [Encoding]: Map the 'xAxis' field to the x-axis and the 'Player Name' field to the y-axis; [Encoding]: Use the 'img' field for the URL of the image; [Mark]: Add a text mark to the visualization; [Encoding]: Map the 'Total Wins' field to the x-axis and the 'Player Name' field to the y-axis; [Encoding]: Use the 'Total Wins' field for the text of the mark; [Mark]: Add another text mark to the visualization; [Encoding]: Map the 'Zero' field to the x-axis and the 'Player Name' field to the y-axis; [Encoding]: Use the 'Player Name' field for the text of the mark <%>
[View 2]; [Data]: Load the dataset from the provided URL; [Transform]: Filter the data where the tourney_level is equal to the selected tourney level; [Transform]: Filter the data based on the selected player name; [Mark]: Use a line mark for the visualization; [Encoding]: Map the 'Year' field to the x-axis and the 'Wins' field to the y-axis; [Encoding]: Use the 'Player Name' field to color the line; [Mark]: Add a text mark to the visualization; [Encoding]: Map the 'Year' field to the x-axis and the 'Wins' field to the y-axis; [Encoding]: Use the 'Wins' field for the text of the mark; [Encoding]: Use the 'Player Name' field to color the text mark.","View #1:
Step 1. Primary Information: 'Total Wins' and 'Player Name' fields are mapped to the x-axis and y-axis respectively. The bars are colored based on the 'Player Name' field.
Step 2. Secondary Information: The 'img' field is used for the URL of the image. The 'Total Wins' field is used for the text of the mark. The 'Zero' field is mapped to the x-axis and the 'Player Name' field is used for the text of the mark.
Step 3. Command: Create a bar chart with 'Total Wins' on the x-axis and 'Player Name' on the y-axis, color the bars by 'Player Name'.
Step 4. Query: 'Total Wins' by 'Player Name', color by 'Player Name'
Step 5. Question: What is the distribution of total wins by player?

View #2:
Step 1. Primary Information: 'Year' and 'Wins' fields are mapped to the x-axis and y-axis respectively. The line is colored based on the 'Player Name' field.
Step 2. Secondary Information: The 'Wins' field is used for the text of the mark. The 'Player Name' field is used to color the text mark.
Step 3. Command: Create a line chart with 'Year' on the x-axis and 'Wins' on the y-axis, color the line by 'Player Name'.
Step 4. Query: 'Wins' by 'Year', color by 'Player Name'
Step 5. Question: How has the number of wins changed over the years for each player?","View #1: [Encoding]: Map the 'Total Wins' field to the x-axis and the 'Player Name' field to the y-axis; [Encoding]: Use the 'Player Name' field to color the bars; [Encoding]: Map the 'xAxis' field to the x-axis and the 'Player Name' field to the y-axis; [Encoding]: Use the 'img' field for the URL of the image; [Encoding]: Map the 'Total Wins' field to the x-axis and the 'Player Name' field to the y-axis; [Encoding]: Use the 'Total Wins' field for the text of the mark; [Encoding]: Map the 'Zero' field to the x-axis and the 'Player Name' field to the y-axis; [Encoding]: Use the 'Player Name' field for the text of the mark
View #2: [Encoding]: Map the 'Year' field to the x-axis and the 'Wins' field to the y-axis; [Encoding]: Use the 'Player Name' field to color the line; [Encoding]: Map the 'Year' field to the x-axis and the 'Wins' field to the y-axis; [Encoding]: Use the 'Wins' field for the text of the mark; [Encoding]: Use the 'Player Name' field to color the text mark.","[""'Total Wins' and 'Player Name' fields are mapped to the x-axis and y-axis respectively. The bars are colored based on the 'Player Name' field."", ""'Year' and 'Wins' fields are mapped to the x-axis and y-axis respectively. The line is colored based on the 'Player Name' field.""]","[""The 'img' field is used for the URL of the image. The 'Total Wins' field is used for the text of the mark. The 'Zero' field is mapped to the x-axis and the 'Player Name' field is used for the text of the mark."", ""The 'Wins' field is used for the text of the mark. The 'Player Name' field is used to color the text mark.""]","[""Create a bar chart with 'Total Wins' on the x-axis and 'Player Name' on the y-axis, color the bars by 'Player Name'."", ""Create a line chart with 'Year' on the x-axis and 'Wins' on the y-axis, color the line by 'Player Name'.""]","[""'Total Wins' by 'Player Name', color by 'Player Name'"", ""'Wins' by 'Year', color by 'Player Name'""]","['What is the distribution of total wins by player?', 'How has the number of wins changed over the years for each player?']"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load the data from the URL https://raw.githubusercontent.com/deldersveld/topojson/master/continents/europe.json and format it as topojson with the feature being continent_Europe_subunits; [Transform]: Lookup the properties.geounit from the data loaded from the URL https://raw.githubusercontent.com/maddyht20/maddyht20.github.io/main/Week7EuropeExportsdata_REAL_NEW.csv and map it to the fields 'Exports of goods and services (current US$billion)'; [Chart-Type]: Create a geoshape chart; [Mark]: Use geoshape as the mark; [Encoding]: Encode the color of the geoshape with the field 'Exports of goods and services (current US$billion)' and use the viridis color scheme; [Encoding]: Add a tooltip that shows the properties.geounit as 'Country' and 'Exports of goods and services (current US$billion)' with a format of .2f; [Projection]: Use the equalEarth projection; [Style]: Set the title of the chart to 'Europe: Exports of goods and services (current US$billion)' with the subtitle 'Source: https://raw.githubusercontent.com/leakyMirror/map-of-europe/master/TopoJSON/europe.topojson' in italic font and size 12, anchored at the start and colored black.

Step 3. Instructions:
[View 1]; [Data]: Load the data from the URL https://raw.githubusercontent.com/deldersveld/topojson/master/continents/europe.json and format it as topojson with the feature being continent_Europe_subunits; [Transform]: Lookup the properties.geounit from the data loaded from the URL https://raw.githubusercontent.com/maddyht20/maddyht20.github.io/main/Week7EuropeExportsdata_REAL_NEW.csv and map it to the fields 'Exports - goods and services'; [Chart-Type]: Create a geoshape chart; [Mark]: Use geoshape as the mark; [Encoding]: Encode the color of the geoshape with the field 'Exports - goods and services' and use the viridis color scheme; [Encoding]: Add a tooltip that shows the properties.geounit as 'Country' and 'Exports - goods and services' with a format of .2f; [Projection]: Use the equalEarth projection; [Style]: Set the title of the chart to 'Europe: Exports of goods and services (current US$billion)' with the subtitle 'Source: https://raw.githubusercontent.com/leakyMirror/map-of-europe/master/TopoJSON/europe.topojson' in italic font and size 12, anchored at the start and colored black.","View #1:
Step 1. Primary Information: The chart is a geoshape chart that is color-encoded with the field 'Exports - goods and services' using the viridis color scheme.
Step 2. Secondary Information: A tooltip is added that shows the properties.geounit as 'Country' and 'Exports - goods and services' with a format of .2f.
Step 3. Command: Create a geoshape chart color-encoded with the 'Exports - goods and services' field using the viridis color scheme.
Step 4. Query: Geoshape chart, color encoding with 'Exports - goods and services', viridis color scheme.
Step 5. Question: How does the geoshape chart look when color-encoded with the 'Exports - goods and services' field using the viridis color scheme?",View #1: [Chart-Type]: Create a geoshape chart; [Encoding]: Encode the color of the geoshape with the field 'Exports - goods and services' and use the viridis color scheme; [Encoding]: Add a tooltip that shows the properties.geounit as 'Country' and 'Exports - goods and services' with a format of .2f,"[""The chart is a geoshape chart that is color-encoded with the field 'Exports - goods and services' using the viridis color scheme.""]","[""A tooltip is added that shows the properties.geounit as 'Country' and 'Exports - goods and services' with a format of .2f.""]","[""Create a geoshape chart color-encoded with the 'Exports - goods and services' field using the viridis color scheme.""]","[""Geoshape chart, color encoding with 'Exports - goods and services', viridis color scheme.""]","[""How does the geoshape chart look when color-encoded with the 'Exports - goods and services' field using the viridis color scheme?""]"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load the dataset; [Chart-Type]: Create a donut chart; [Mark]: Use an arc mark with an inner radius of 40; [Encoding]: Map the 'value' field to the theta channel, and the 'Regime' field to the color channel; [Encoding]: Add a tooltip to display the 'value' field as 'GDP'; [Style]: Set the title of the chart to 'Share of World GDP Represented by 4 Main Regimes', with a subtitle 'Source: The Economist' in italic font and size 12, anchored at the start, in black color.

Step 3. Instructions:
[View 1]; [Data]: Load the dataset; [Chart-Type]: Create a donut chart; [Mark]: Use an arc mark with an inner radius of 40; [Encoding]: Map the 'GDP' field to the theta channel, and the 'Regime' field to the color channel; [Encoding]: Add a tooltip to display the 'GDP' field; [Style]: Set the title of the chart to 'Share of World GDP Represented by 4 Main Regimes', with a subtitle 'Source: The Economist' in italic font and size 12, anchored at the start, in black color.","View #1:
Step 1. Primary Information: The chart type is a donut chart, with 'GDP' field mapped to the theta channel and 'Regime' field mapped to the color channel.
Step 2. Secondary Information: A tooltip is added to display the 'GDP' field.
Step 3. Command: Create a donut chart with 'GDP' on the theta channel and 'Regime' on the color channel.
Step 4. Query: Donut chart, 'GDP' to theta channel, 'Regime' to color channel
Step 5. Question: Can you create a donut chart with 'GDP' on the theta channel and 'Regime' on the color channel?","View #1: [Chart-Type]: Create a donut chart; [Encoding]: Map the 'GDP' field to the theta channel, and the 'Regime' field to the color channel; [Encoding]: Add a tooltip to display the 'GDP' field","[""The chart type is a donut chart, with 'GDP' field mapped to the theta channel and 'Regime' field mapped to the color channel.""]","[""A tooltip is added to display the 'GDP' field.""]","[""Create a donut chart with 'GDP' on the theta channel and 'Regime' on the color channel.""]","[""Donut chart, 'GDP' to theta channel, 'Regime' to color channel""]","[""Can you create a donut chart with 'GDP' on the theta channel and 'Regime' on the color channel?""]"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Embed data values in the chart; [Chart-Type]: Create a bar chart; [Mark]: Use bars to represent data; [Encoding]: Map 'Year' to the x-axis and sort in descending order; [Encoding]: Map 'Gross savings (% of GDP)' to the y-axis with a scale domain from 0 to 120; [Encoding]: Map 'Country Name' to color and use a nominal scale with domain values 'Canada', 'Saudi Arabia', 'Senegal' and corresponding color range '#03f7b8', '#899fdb', '#422b39'; [Style]: Set the width and height of the chart to 300; [Style]: Set the title of the chart to 'Gross Savings (% of GDP)' with a subtitle 'in Canada, Saudi Arabia and Senegal' in italic font style and font size 9, anchor the title at the start and color it black.

Step 3. Instructions:
[View 1]; [Data]: Embed data values in the chart; [Chart-Type]: Create a bar chart; [Mark]: Use bars to represent data; [Encoding]: Map 'Year' to the x-axis and sort in descending order; [Encoding]: Map 'Gross savings (% of GDP)' to the y-axis with a scale domain from 0 to 120; [Encoding]: Map 'Country Name' to color and use a nominal scale with domain values 'Canada', 'Saudi Arabia', 'Senegal' and corresponding color range '#03f7b8', '#899fdb', '#422b39'; [Style]: Set the width and height of the chart to 300; [Style]: Set the title of the chart to 'Gross Savings (% of GDP)' with a subtitle 'in Canada, Saudi Arabia and Senegal' in italic font style and font size 9, anchor the title at the start and color it black.","View #1:
Step 1. Primary Information: The chart is a bar chart with 'Year' on the x-axis and 'Gross savings (% of GDP)' on the y-axis. The data is sorted in descending order by year. 
Step 2. Secondary Information: The bars are colored based on 'Country Name' with specific colors for 'Canada', 'Saudi Arabia', and 'Senegal'.
Step 3. Command: Create a descending bar chart with 'Year' on the x-axis and 'Gross savings (% of GDP)' on the y-axis.
Step 4. Query: Bar chart, Year on x-axis, Gross savings (% of GDP) on y-axis, descending order
Step 5. Question: What is the trend of gross savings as a percentage of GDP over the years?","View #1: [Chart-Type]: Create a bar chart; [Encoding]: Map 'Year' to the x-axis and sort in descending order; [Encoding]: Map 'Gross savings (% of GDP)' to the y-axis with a scale domain from 0 to 120; [Encoding]: Map 'Country Name' to color and use a nominal scale with domain values 'Canada', 'Saudi Arabia', 'Senegal' and corresponding color range '#03f7b8', '#899fdb', '#422b39'","[""The chart is a bar chart with 'Year' on the x-axis and 'Gross savings (% of GDP)' on the y-axis. The data is sorted in descending order by year.""]","[""The bars are colored based on 'Country Name' with specific colors for 'Canada', 'Saudi Arabia', and 'Senegal'.""]","[""Create a descending bar chart with 'Year' on the x-axis and 'Gross savings (% of GDP)' on the y-axis.""]","['Bar chart, Year on x-axis, Gross savings (% of GDP) on y-axis, descending order']",['What is the trend of gross savings as a percentage of GDP over the years?']
"Step 1. Composite Views:
- True/False: True
- (If True) Type: layered
- Number of plots: 2

Step 2. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/maddyht20/maddyht20.github.io/main/_CAF_2018-22_WGI_SHIFTED_final.csv'; [Transform]: Filter the data to include only the years 2017 and 2021; [Encoding]: Encode the 'CAF' field to the x-axis as a quantitative variable with a scale domain of 0 to 70, and encode the 'Country' field to the y-axis as a nominal variable with no title; [Mark]: Draw lines to represent the data; [Style]: Set the color of the lines to '#eee'; [Encoding]: Use the 'Country' field as detail for the lines; [View 2]; [Mark]: Draw filled points to represent the data; [Interaction]: Add a single selection interaction bound to a select input with options for 'Decrease', 'Increase', and 'Neither', named 'Change:'; [Encoding]: Encode the 'Country' and 'CAF' fields as tooltips titled 'Country' and 'WGI Score' respectively, encode the 'year' field to color as a nominal variable with a color scheme of 'inferno', encode the 'Increase/Decrease?' field to shape as a nominal variable titled 'Increase or Decrease?', and set the size and opacity of the points to 50 and 1 respectively; [Style]: Set the height of the chart to 1000 and the width to 200, and add a title 'Change in WGI Overall Score between 2017 and 2021' with a subtitle 'Source: CAF' in italic font style and font size 10, anchored at the start and colored black.

Step 3. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/maddyht20/maddyht20.github.io/main/_CAF_2018-22_WGI_SHIFTED_final.csv'; [Transform]: Filter the data to include only the Year 2017 and 2021; [Encoding]: Encode the 'WGI Score' field to the x-axis as a quantitative variable with a scale domain of 0 to 70, and encode the 'Country' field to the y-axis as a nominal variable with no title; [Mark]: Draw lines to represent the data; [Style]: Set the color of the lines to '#eee'; [Encoding]: Use the 'Country' field as detail for the lines; [View 2]; [Mark]: Draw filled points to represent the data; [Interaction]: Add a single selection interaction bound to a select input with options for 'Decrease', 'Increase', and 'Neither', named 'Change:'; [Encoding]: Encode the 'Country' and 'WGI Score' fields as tooltips titled 'Country' and 'WGI Score' respectively, encode the 'Year' field to color as a nominal variable with a color scheme of 'inferno', encode the 'Increase or Decrease?' field to shape as a nominal variable titled 'Increase or Decrease?', and set the size and opacity of the points to 50 and 1 respectively; [Style]: Set the height of the chart to 1000 and the width to 200, and add a title 'Change in WGI Overall Score between 2017 and 2021' with a subtitle 'Source: CAF' in italic font style and font size 10, anchored at the start and colored black.","View #1:
Step 1. Primary Information: The 'WGI Score' field is encoded to the x-axis as a quantitative variable with a scale domain of 0 to 70, and the 'Country' field is encoded to the y-axis as a nominal variable with no title.
Step 2. Secondary Information: The 'Country' field is used as detail for the lines. The 'Country' and 'WGI Score' fields are encoded as tooltips titled 'Country' and 'WGI Score' respectively. The 'Year' field is encoded to color as a nominal variable with a color scheme of 'inferno'. The 'Increase or Decrease?' field is encoded to shape as a nominal variable titled 'Increase or Decrease?'. The size and opacity of the points are set to 50 and 1 respectively.
Step 3. Command: Encode 'WGI Score' to the x-axis and 'Country' to the y-axis.
Step 4. Query: 'WGI Score' on x-axis, 'Country' on y-axis
Step 5. Question: How are 'WGI Score' and 'Country' represented on the x and y axes respectively?","View #1: [Encoding]: Encode the 'WGI Score' field to the x-axis as a quantitative variable with a scale domain of 0 to 70, and encode the 'Country' field to the y-axis as a nominal variable with no title; [Encoding]: Use the 'Country' field as detail for the lines; [Encoding]: Encode the 'Country' and 'WGI Score' fields as tooltips titled 'Country' and 'WGI Score' respectively, encode the 'Year' field to color as a nominal variable with a color scheme of 'inferno', encode the 'Increase or Decrease?' field to shape as a nominal variable titled 'Increase or Decrease?', and set the size and opacity of the points to 50 and 1 respectively","[""The 'WGI Score' field is encoded to the x-axis as a quantitative variable with a scale domain of 0 to 70, and the 'Country' field is encoded to the y-axis as a nominal variable with no title.""]","[""The 'Country' field is used as detail for the lines. The 'Country' and 'WGI Score' fields are encoded as tooltips titled 'Country' and 'WGI Score' respectively. The 'Year' field is encoded to color as a nominal variable with a color scheme of 'inferno'. The 'Increase or Decrease?' field is encoded to shape as a nominal variable titled 'Increase or Decrease?'. The size and opacity of the points are set to 50 and 1 respectively.""]","[""Encode 'WGI Score' to the x-axis and 'Country' to the y-axis.""]","[""'WGI Score' on x-axis, 'Country' on y-axis""]","[""How are 'WGI Score' and 'Country' represented on the x and y axes respectively?""]"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Embed data values in the chart; [Chart-Type]: Create a bar chart; [Mark]: Use bars as marks with color '#8268ca', stroke width of 2, and opacity of 1; [Encoding]: Encode the 'Corporate Tax Rate' field on the x-axis as a quantitative variable; [Encoding]: Encode the 'Country' field on the y-axis as an ordinal variable with the title 'G20 Corporate Tax Rate'; [Style]: Set the height of the chart to 300 and the width to 250.

Step 3. Instructions:
[View 1]; [Data]: Embed data values in the chart; [Chart-Type]: Create a bar chart; [Mark]: Use bars as marks with color '#8268ca', stroke width of 2, and opacity of 1; [Encoding]: Encode the 'Corporate Tax Rate' field on the x-axis as a quantitative variable; [Encoding]: Encode the 'Country' field on the y-axis as an ordinal variable with the title 'G20 Corporate Tax Rate'; [Style]: Set the height of the chart to 300 and the width to 250.","View #1:
Step 1. Primary Information: The chart is a bar chart that represents the 'Corporate Tax Rate' of different countries.
Step 2. Secondary Information: The 'Country' field is represented on the y-axis as an ordinal variable with the title 'G20 Corporate Tax Rate'.
Step 3. Command: Create a bar chart with 'Corporate Tax Rate' on the x-axis and 'Country' on the y-axis.
Step 4. Query: 'Corporate Tax Rate' by 'Country'
Step 5. Question: What is the 'Corporate Tax Rate' for each country?",View #1: [Chart-Type]: Create a bar chart; [Encoding]: Encode the 'Corporate Tax Rate' field on the x-axis as a quantitative variable; [Encoding]: Encode the 'Country' field on the y-axis as an ordinal variable with the title 'G20 Corporate Tax Rate',"[""The chart is a bar chart that represents the 'Corporate Tax Rate' of different countries.""]","[""The 'Country' field is represented on the y-axis as an ordinal variable with the title 'G20 Corporate Tax Rate'.""]","[""Create a bar chart with 'Corporate Tax Rate' on the x-axis and 'Country' on the y-axis.""]","[""'Corporate Tax Rate' by 'Country'""]","[""What is the 'Corporate Tax Rate' for each country?""]"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load the data; [Transform]: Calculate the column value by dividing the id by 10 and rounding up, and calculate the row value by subtracting the product of the column value and 10 from the id; [Mark]: Mark the data points as filled points; [Encoding]: Encode the x-axis with the column value and the y-axis with the row value, both without axis. Encode the shape with a predefined shape value. Encode the color with a condition that if the id is less than or equal to 62 and greater than 30, the color is rgb(167,165,156), if the id is less than or equal to 30, the color is rgb(232,200,93), otherwise the color is rgb(219,165,132). Encode the size with a fixed value of 0.008; [Style]: Set the width and height of the chart to 400, and set the background color to rgba(255, 255, 255, 0).

Step 3. Instructions:
[View 1]; [Data]: Load the data; [Transform]: Calculate the column value by dividing the id by 10 and rounding up, and calculate the row value by subtracting the product of the column value and 10 from the id; [Mark]: Mark the data points as filled points; [Encoding]: Encode the x-axis with the column value and the y-axis with the row value, both without axis. Encode the shape with a predefined shape value. Encode the color with a condition that if the id is less than or equal to 62 and greater than 30, the color is rgb(167,165,156), if the id is less than or equal to 30, the color is rgb(232,200,93), otherwise the color is rgb(219,165,132). Encode the size with a fixed value of 0.008; [Style]: Set the width and height of the chart to 400, and set the background color to rgba(255, 255, 255, 0).","View #1:
Step 1. Primary Information: The chart is encoded with x-axis as column value and y-axis as row value. The shape is predefined. The color is determined by the id value and the size is a fixed value of 0.008.
Step 2. Secondary Information: The color is rgb(167,165,156) if the id is less than or equal to 62 and greater than 30, rgb(232,200,93) if the id is less than or equal to 30, and rgb(219,165,132) otherwise.
Step 3. Command: Create a chart with x-axis as column value, y-axis as row value, predefined shape, and fixed size of 0.008.
Step 4. Query: Column value for x-axis, row value for y-axis, predefined shape, fixed size of 0.008
Step 5. Question: What does the chart look like with x-axis as column value, y-axis as row value, predefined shape, and fixed size of 0.008?","View #1: [Encoding]: Encode the x-axis with the column value and the y-axis with the row value, both without axis. Encode the shape with a predefined shape value. Encode the color with a condition that if the id is less than or equal to 62 and greater than 30, the color is rgb(167,165,156), if the id is less than or equal to 30, the color is rgb(232,200,93), otherwise the color is rgb(219,165,132). Encode the size with a fixed value of 0.008",['The chart is encoded with x-axis as column value and y-axis as row value. The shape is predefined. The color is determined by the id value and the size is a fixed value of 0.008.'],"['The color is rgb(167,165,156) if the id is less than or equal to 62 and greater than 30, rgb(232,200,93) if the id is less than or equal to 30, and rgb(219,165,132) otherwise.']","['Create a chart with x-axis as column value, y-axis as row value, predefined shape, and fixed size of 0.008.']","['Column value for x-axis, row value for y-axis, predefined shape, fixed size of 0.008']","['What does the chart look like with x-axis as column value, y-axis as row value, predefined shape, and fixed size of 0.008?']"
"Step 1. Composite Views:
- False

Step 2. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/josh-shah/josh-shah.github.io/main/worldmapgeo.json' and format it to extract the 'features' property; [Data]: Load additional data from the URL 'https://raw.githubusercontent.com/josh-shah/josh-shah.github.io/main/mostpopularteams_finalproject.csv'; [Transform]: Perform a lookup transformation on the 'properties.name' field from the first dataset, using the 'geoName' field from the second dataset as the key, and extract the 'Most Popular Team' and 'Max % of search queries' fields; [Chart-Type]: Create a geoshape chart; [Mark]: Use a geoshape mark with no stroke and a stroke width of 2; [Encoding]: Encode the 'properties.name', 'Most Popular Team', and 'Max % of search queries' fields as tooltips; [Encoding]: Encode the 'Most Popular Team' field as the color of the geoshapes, using an ordinal scale with a specified range of colors; [Style]: Set the width of the chart to 'container' and the height to 350; [Style]: Add a title 'Most Popular PL Teams' with a subtitle '% of search queries for Top 6 over the past year' and 'Source: Google Trends', and set the title's font size to 18, the subtitle's font style to italic and font size to 12, and the title's anchor to 'start' and color to 'black'; [Style]: Set the legend's orientation to 'bottom', the number of columns to 1, and the fill color to '#FfFfFf'.

Step 3. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/josh-shah/josh-shah.github.io/main/worldmapgeo.json' and format it to extract the 'features' property; [Data]: Load additional data from the URL 'https://raw.githubusercontent.com/josh-shah/josh-shah.github.io/main/mostpopularteams_finalproject.csv'; [Transform]: Perform a lookup transformation on the 'properties.name' field from the first dataset, using the 'geoName' field from the second dataset as the key, and extract the 'Most Popular Team' and 'Max % of search queries' fields; [Chart-Type]: Create a geoshape chart; [Mark]: Use a geoshape mark with no stroke and a stroke width of 2; [Encoding]: Encode the 'Country', 'Most Popular Team', and 'Max % of search queries' fields as tooltips; [Encoding]: Encode the 'Most Popular Team' field as the color of the geoshapes, using an ordinal scale with a specified range of colors; [Style]: Set the width of the chart to 'container' and the height to 350; [Style]: Add a title 'Most Popular PL Teams' with a subtitle '% of search queries for Top 6 over the past year' and 'Source: Google Trends', and set the title's font size to 18, the subtitle's font style to italic and font size to 12, and the title's anchor to 'start' and color to 'black'; [Style]: Set the legend's orientation to 'bottom', the number of columns to 1, and the fill color to '#FfFfFf'.","View #1:
Step 1. Primary Information: The chart type is a geoshape chart. The 'Country', 'Most Popular Team', and 'Max % of search queries' fields are encoded as tooltips. The 'Most Popular Team' field is encoded as the color of the geoshapes.
Step 2. Secondary Information: The color of the geoshapes is based on an ordinal scale with a specified range of colors.
Step 3. Command: Create a geoshape chart with tooltips for 'Country', 'Most Popular Team', and 'Max % of search queries', and color the geoshapes based on the 'Most Popular Team'.
Step 4. Query: Geoshape chart, tooltips for 'Country', 'Most Popular Team', 'Max % of search queries', color of geoshapes by 'Most Popular Team'
Step 5. Question: What does the geoshape chart reveal about the most popular team in each country based on the max % of search queries?","View #1: [Chart-Type]: Create a geoshape chart; [Encoding]: Encode the 'Country', 'Most Popular Team', and 'Max % of search queries' fields as tooltips; [Encoding]: Encode the 'Most Popular Team' field as the color of the geoshapes, using an ordinal scale with a specified range of colors","[""The chart type is a geoshape chart. The 'Country', 'Most Popular Team', and 'Max % of search queries' fields are encoded as tooltips. The 'Most Popular Team' field is encoded as the color of the geoshapes.""]",['The color of the geoshapes is based on an ordinal scale with a specified range of colors.'],"[""Create a geoshape chart with tooltips for 'Country', 'Most Popular Team', and 'Max % of search queries', and color the geoshapes based on the 'Most Popular Team'.""]","[""Geoshape chart, tooltips for 'Country', 'Most Popular Team', 'Max % of search queries', color of geoshapes by 'Most Popular Team'""]",['What does the geoshape chart reveal about the most popular team in each country based on the max % of search queries?']
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Use the dataset provided; [Chart-Type]: Create a bar chart; [Mark]: Use bars to represent the data; [Encoding]: Map the 'Responce' field to the x-axis and set the type as nominal; [Encoding]: Map the 'Percentage of Responces' field to the y-axis and set the type as quantitative; [Encoding]: Rotate the x-axis labels by 45 degrees; [Style]: Set the width of the chart to 270 and the height to 200; [Style]: Add a title 'Comfortability of data being shared' and a subtitle 'A survey showing the comfortability of data being shared with government, given clear explanations of use. Source: Delta Poll Survey Results'. Set the subtitle font style to italic and font size to 10. Anchor the title to the start and set the color to black.

Step 3. Instructions:
[View 1]; [Data]: Use the dataset provided; [Chart-Type]: Create a bar chart; [Mark]: Use bars to represent the data; [Encoding]: Map the 'Comfort Level' field to the x-axis and set the type as nominal; [Encoding]: Map the 'Percentage of Responses' field to the y-axis and set the type as quantitative; [Encoding]: Rotate the x-axis labels by 45 degrees; [Style]: Set the width of the chart to 270 and the height to 200; [Style]: Add a title 'Comfortability of data being shared' and a subtitle 'A survey showing the comfortability of data being shared with government, given clear explanations of use. Source: Delta Poll Survey Results'. Set the subtitle font style to italic and font size to 10. Anchor the title to the start and set the color to black.","View #1:
Step 1. Primary Information: The chart is a bar chart with 'Comfort Level' on the x-axis and 'Percentage of Responses' on the y-axis.
Step 2. Secondary Information: The x-axis labels are rotated by 45 degrees.
Step 3. Command: Create a bar chart with 'Comfort Level' on the x-axis and 'Percentage of Responses' on the y-axis.
Step 4. Query: Bar chart, 'Comfort Level' x-axis, 'Percentage of Responses' y-axis
Step 5. Question: What does the bar chart of 'Comfort Level' versus 'Percentage of Responses' look like?",View #1: [Chart-Type]: Create a bar chart; [Encoding]: Map the 'Comfort Level' field to the x-axis and set the type as nominal; [Encoding]: Map the 'Percentage of Responses' field to the y-axis and set the type as quantitative; [Encoding]: Rotate the x-axis labels by 45 degrees,"[""The chart is a bar chart with 'Comfort Level' on the x-axis and 'Percentage of Responses' on the y-axis.""]",['The x-axis labels are rotated by 45 degrees.'],"[""Create a bar chart with 'Comfort Level' on the x-axis and 'Percentage of Responses' on the y-axis.""]","[""Bar chart, 'Comfort Level' x-axis, 'Percentage of Responses' y-axis""]","[""What does the bar chart of 'Comfort Level' versus 'Percentage of Responses' look like?""]"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: layered
- Number of plots: 5

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL ""https://raw.githubusercontent.com/JamesFKean/JamesFKean.github.io/main/heatmapdtafinalV2.csv""; [Chart-Type]: Create a heatmap; [Mark]: Use rectangles to represent data points; [Encoding]: Map the 'pct_chn_exa' field to the x-axis and bin it with a maximum of 20 bins, map the 'GDP Growth Rates' field to the y-axis and bin it with a maximum of 30 bins, map the count of data points to the color of the rectangles, and add a tooltip that shows the count of observations; [Style]: Set the color range of the heatmap to ['black', 'darkorange', 'orange', 'gold', 'goldred', 'red']; [Interaction]: Add a checkbox parameter named 'Means' <%>
[View 2]; [Chart-Type]: Add a rule mark to the chart; [Encoding]: Map the mean of the 'pct_chn_exa' field to the x-axis and set the color to 'darkgrey'; [Interaction]: Set the opacity of the rule mark to 0 when the 'Means' parameter is not checked <%>
[View 3]; [Chart-Type]: Add another rule mark to the chart; [Encoding]: Map the mean of the 'GDP Growth Rates' field to the y-axis and set the color to 'darkgrey'; [Interaction]: Set the opacity of the rule mark to 0 when the 'Means' parameter is not checked <%>
[View 4]; [Transform]: Filter the data to only include observations where the 'Country' field is 'China'; [Chart-Type]: Add a rule mark to the chart; [Encoding]: Map the mean of the 'GDP Growth Rates' field to the y-axis and set the color to 'darkorange'; [Interaction]: Set the opacity of the rule mark to 0 when the 'Means' parameter is not checked <%>
[View 5]; [Transform]: Filter the data to only include observations where the 'Country' field is 'China'; [Chart-Type]: Add another rule mark to the chart; [Encoding]: Map the mean of the 'pct_chn_exa' field to the x-axis and set the color to 'darkorange'; [Interaction]: Set the opacity of the rule mark to 0 when the 'Means' parameter is not checked.

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL ""https://raw.githubusercontent.com/JamesFKean/JamesFKean.github.io/main/heatmapdtafinalV2.csv""; [Chart-Type]: Create a heatmap; [Mark]: Use rectangles to represent data points; [Encoding]: Map the 'Change in Energy Consumption' field to the x-axis and bin it with a maximum of 20 bins, map the 'GDP Growth' field to the y-axis and bin it with a maximum of 30 bins, map the count of data points to the color of the rectangles, and add a tooltip that shows the count of observations; [Style]: Set the color range of the heatmap to ['black', 'darkorange', 'orange', 'gold', 'goldred', 'red']; [Interaction]: Add a checkbox parameter named 'Means' <%>
[View 2]; [Chart-Type]: Add a rule mark to the chart; [Encoding]: Map the mean of the 'Change in Energy Consumption' field to the x-axis and set the color to 'darkgrey'; [Interaction]: Set the opacity of the rule mark to 0 when the 'Means' parameter is not checked <%>
[View 3]; [Chart-Type]: Add another rule mark to the chart; [Encoding]: Map the mean of the 'GDP Growth' field to the y-axis and set the color to 'darkgrey'; [Interaction]: Set the opacity of the rule mark to 0 when the 'Means' parameter is not checked <%>
[View 4]; [Transform]: Filter the data to only include observations where the 'Country' field is 'China'; [Chart-Type]: Add a rule mark to the chart; [Encoding]: Map the mean of the 'GDP Growth' field to the y-axis and set the color to 'darkorange'; [Interaction]: Set the opacity of the rule mark to 0 when the 'Means' parameter is not checked <%>
[View 5]; [Transform]: Filter the data to only include observations where the 'Country' field is 'China'; [Chart-Type]: Add another rule mark to the chart; [Encoding]: Map the mean of the 'Change in Energy Consumption' field to the x-axis and set the color to 'darkorange'; [Interaction]: Set the opacity of the rule mark to 0 when the 'Means' parameter is not checked.","View #1:
Step 1. Primary Information: Heatmap chart with 'Change in Energy Consumption' on the x-axis and 'GDP Growth' on the y-axis.
Step 2. Secondary Information: The count of data points is represented by the color of the rectangles, and a tooltip shows the count of observations.
Step 3. Command: Create a heatmap with 'Change in Energy Consumption' on the x-axis and 'GDP Growth' on the y-axis.
Step 4. Query: Heatmap of 'Change in Energy Consumption' vs 'GDP Growth'
Step 5. Question: What is the relationship between 'Change in Energy Consumption' and 'GDP Growth'?

View #2:
Step 1. Primary Information: Rule mark representing the mean of the 'Change in Energy Consumption' field on the x-axis.
Step 2. Secondary Information: The color of the rule mark is 'darkgrey'.
Step 3. Command: Add a rule mark representing the mean of 'Change in Energy Consumption' on the x-axis.
Step 4. Query: Mean of 'Change in Energy Consumption' on x-axis
Step 5. Question: What is the mean of 'Change in Energy Consumption'?

View #3:
Step 1. Primary Information: Rule mark representing the mean of the 'GDP Growth' field on the y-axis.
Step 2. Secondary Information: The color of the rule mark is 'darkgrey'.
Step 3. Command: Add a rule mark representing the mean of 'GDP Growth' on the y-axis.
Step 4. Query: Mean of 'GDP Growth' on y-axis
Step 5. Question: What is the mean of 'GDP Growth'?

View #4:
Step 1. Primary Information: Rule mark representing the mean of the 'GDP Growth' field on the y-axis.
Step 2. Secondary Information: The color of the rule mark is 'darkorange'.
Step 3. Command: Add a rule mark representing the mean of 'GDP Growth' on the y-axis.
Step 4. Query: Mean of 'GDP Growth' on y-axis
Step 5. Question: What is the mean of 'GDP Growth'?

View #5:
Step 1. Primary Information: Rule mark representing the mean of the 'Change in Energy Consumption' field on the x-axis.
Step 2. Secondary Information: The color of the rule mark is 'darkorange'.
Step 3. Command: Add a rule mark representing the mean of 'Change in Energy Consumption' on the x-axis.
Step 4. Query: Mean of 'Change in Energy Consumption' on x-axis
Step 5. Question: What is the mean of 'Change in Energy Consumption'?","View #1: [Chart-Type]: Create a heatmap; [Encoding]: Map the 'Change in Energy Consumption' field to the x-axis and bin it with a maximum of 20 bins, map the 'GDP Growth' field to the y-axis and bin it with a maximum of 30 bins, map the count of data points to the color of the rectangles, and add a tooltip that shows the count of observations
View #2: [Chart-Type]: Add a rule mark to the chart; [Encoding]: Map the mean of the 'Change in Energy Consumption' field to the x-axis and set the color to 'darkgrey'
View #3: [Chart-Type]: Add another rule mark to the chart; [Encoding]: Map the mean of the 'GDP Growth' field to the y-axis and set the color to 'darkgrey'
View #4: [Chart-Type]: Add a rule mark to the chart; [Encoding]: Map the mean of the 'GDP Growth' field to the y-axis and set the color to 'darkorange'
View #5: [Chart-Type]: Add another rule mark to the chart; [Encoding]: Map the mean of the 'Change in Energy Consumption' field to the x-axis and set the color to 'darkorange'","[""Heatmap chart with 'Change in Energy Consumption' on the x-axis and 'GDP Growth' on the y-axis."", ""Rule mark representing the mean of the 'Change in Energy Consumption' field on the x-axis."", ""Rule mark representing the mean of the 'GDP Growth' field on the y-axis."", ""Rule mark representing the mean of the 'GDP Growth' field on the y-axis."", ""Rule mark representing the mean of the 'Change in Energy Consumption' field on the x-axis.""]","['The count of data points is represented by the color of the rectangles, and a tooltip shows the count of observations.', ""The color of the rule mark is 'darkgrey'."", ""The color of the rule mark is 'darkgrey'."", ""The color of the rule mark is 'darkorange'."", ""The color of the rule mark is 'darkorange'.""]","[""Create a heatmap with 'Change in Energy Consumption' on the x-axis and 'GDP Growth' on the y-axis."", ""Add a rule mark representing the mean of 'Change in Energy Consumption' on the x-axis."", ""Add a rule mark representing the mean of 'GDP Growth' on the y-axis."", ""Add a rule mark representing the mean of 'GDP Growth' on the y-axis."", ""Add a rule mark representing the mean of 'Change in Energy Consumption' on the x-axis.""]","[""Heatmap of 'Change in Energy Consumption' vs 'GDP Growth'"", ""Mean of 'Change in Energy Consumption' on x-axis"", ""Mean of 'GDP Growth' on y-axis"", ""Mean of 'GDP Growth' on y-axis"", ""Mean of 'Change in Energy Consumption' on x-axis""]","[""What is the relationship between 'Change in Energy Consumption' and 'GDP Growth'?"", ""What is the mean of 'Change in Energy Consumption'?"", ""What is the mean of 'GDP Growth'?"", ""What is the mean of 'GDP Growth'?"", ""What is the mean of 'Change in Energy Consumption'?""]"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: multiple views
- Number of plots: 2

Step 2. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/JackECameron/FIT3179/main/D2_resources/data/responseTimes/FRV_total_combined.csv'; [Chart-Type]: Create a geoshape chart; [Mark]: Use geoshape as the mark with fill color as '#faf6f6', stroke color as 'black', stroke width as 0.25, and opacity as 0.5; [Encoding]: Encode the data such that 'dis' field is used for shape encoding, 'perMet' field is used for color encoding with a linear scale and 'goldred' scheme, and 'dis', 'perMet', 'sNumber', and 'totInc' fields are used for tooltip encoding; [Transform]: Filter the data based on 'qSelect' parameter and 'sTag' field; [Interaction]: Add a point selection interaction on 'description' encoding on click event; [Style]: Set the title of the chart as 'Percentage Responses Above 7.7 Minute Standard' with font as 'Calibri Light', color as '#444444', and font size as 24 <%>
[View 2]; [Data]: Use the same data as View 1; [Chart-Type]: Create a line chart; [Mark]: Use line as the mark with vertical orientation, opacity as 0.75, and stroke width as 5; [Encoding]: Encode the data such that 'q' field is used for x encoding, 'rank1' field is used for y encoding, and 'servArea' field is used for color encoding with 'greys' scheme; [Transform]: Filter the data based on 'loc_select' parameter, 'sTag' field, and sort the data based on 'perMet' field and group by 'q' field; [Interaction]: Add a point selection interaction on 'servArea' field; [Style]: Set the title of the chart as 'Station Rankings' with font as 'Calibri Light', color as '#444444', and font size as 24

Step 3. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/JackECameron/FIT3179/main/D2_resources/data/responseTimes/FRV_total_combined.csv'; [Chart-Type]: Create a geoshape chart; [Mark]: Use geoshape as the mark with fill color as '#faf6f6', stroke color as 'black', stroke width as 0.25, and opacity as 0.5; [Encoding]: Encode the data such that 'FRV District' field is used for shape encoding, '% Above Standard' field is used for color encoding with a linear scale and 'goldred' scheme, and 'FRV District', '% Above Standard', 'Number of Stations', and 'Number of Incidences' fields are used for tooltip encoding; [Transform]: Filter the data based on 'qSelect' parameter and 'sTag' field; [Interaction]: Add a point selection interaction on 'description' encoding on click event; [Style]: Set the title of the chart as 'Percentage Responses Above 7.7 Minute Standard' with font as 'Calibri Light', color as '#444444', and font size as 24 <%>
[View 2]; [Data]: Use the same data as View 1; [Chart-Type]: Create a line chart; [Mark]: Use line as the mark with vertical orientation, opacity as 0.75, and stroke width as 5; [Encoding]: Encode the data such that 'Financial Quarter' field is used for x encoding, 'rank1' field is used for y encoding, and 'servArea' field is used for color encoding with 'greys' scheme; [Transform]: Filter the data based on 'loc_select' parameter, 'sTag' field, and sort the data based on '% Above Standard' field and group by 'Financial Quarter' field; [Interaction]: Add a point selection interaction on 'servArea' field; [Style]: Set the title of the chart as 'Station Rankings' with font as 'Calibri Light', color as '#444444', and font size as 24","View #1:
Step 1. Primary Information: The chart is a geoshape chart using 'FRV District' for shape encoding and '% Above Standard' for color encoding.
Step 2. Secondary Information: The color encoding uses a linear scale and 'goldred' scheme. The tooltip encoding uses 'FRV District', '% Above Standard', 'Number of Stations', and 'Number of Incidences' fields.
Step 3. Command: Create a geoshape chart with 'FRV District' as shape and '% Above Standard' as color.
Step 4. Query: Geoshape chart, 'FRV District' shape, '% Above Standard' color
Step 5. Question: What does the geoshape chart look like with 'FRV District' as shape and '% Above Standard' as color?

View #2:
Step 1. Primary Information: The chart is a line chart using 'Financial Quarter' for x encoding, 'rank1' for y encoding, and 'servArea' for color encoding.
Step 2. Secondary Information: The color encoding uses 'greys' scheme.
Step 3. Command: Create a line chart with 'Financial Quarter' on x-axis, 'rank1' on y-axis, and 'servArea' as color.
Step 4. Query: Line chart, 'Financial Quarter' x-axis, 'rank1' y-axis, 'servArea' color
Step 5. Question: How does the line chart look with 'Financial Quarter' on x-axis, 'rank1' on y-axis, and 'servArea' as color?","View #1: [Chart-Type]: Create a geoshape chart; [Encoding]: Encode the data such that 'FRV District' field is used for shape encoding, '% Above Standard' field is used for color encoding with a linear scale and 'goldred' scheme, and 'FRV District', '% Above Standard', 'Number of Stations', and 'Number of Incidences' fields are used for tooltip encoding
View #2: [Chart-Type]: Create a line chart; [Encoding]: Encode the data such that 'Financial Quarter' field is used for x encoding, 'rank1' field is used for y encoding, and 'servArea' field is used for color encoding with 'greys' scheme","[""The chart is a geoshape chart using 'FRV District' for shape encoding and '% Above Standard' for color encoding."", ""The chart is a line chart using 'Financial Quarter' for x encoding, 'rank1' for y encoding, and 'servArea' for color encoding.""]","[""The color encoding uses a linear scale and 'goldred' scheme. The tooltip encoding uses 'FRV District', '% Above Standard', 'Number of Stations', and 'Number of Incidences' fields."", ""The color encoding uses 'greys' scheme.""]","[""Create a geoshape chart with 'FRV District' as shape and '% Above Standard' as color."", ""Create a line chart with 'Financial Quarter' on x-axis, 'rank1' on y-axis, and 'servArea' as color.""]","[""Geoshape chart, 'FRV District' shape, '% Above Standard' color"", ""Line chart, 'Financial Quarter' x-axis, 'rank1' y-axis, 'servArea' color""]","[""What does the geoshape chart look like with 'FRV District' as shape and '% Above Standard' as color?"", ""How does the line chart look with 'Financial Quarter' on x-axis, 'rank1' on y-axis, and 'servArea' as color?""]"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: layered
- Number of plots: 2

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL 'https://raw.githubusercontent.com/EconomicsObservatory/ECOvisualisations/main/articles/how-did-levels-of-uk-hate-crime-change-during-and-after-covid-19/data/f5.csv'; [Transform]: Calculate a new field 'groupaction' as the sum of the fields 'action', 'group', and 'model'; [Transform]: Filter the data to include only rows where 'gender' is 'Women'; [Chart-Type]: Create a point chart; [Mark]: Use a point mark with size 50 and opacity 1; [Encoding]: Map 'value' to the x-axis without a title; [Encoding]: Map 'model' to the shape channel and create a legend titled 'Model' with grey labels and symbols; [Encoding]: Map 'groupaction' to the y-axis without a title, labels, or ticks; [Encoding]: Map 'group' to the color channel without a legend and use the 'dark2' color scheme; [Encoding]: Map 'group' to the fill channel and create a legend titled 'Ethnic group' using the 'dark2' color scheme; [Style]: Set the label color, symbol fill color, and title color of the legend to grey <%>
[View 2]; [Chart-Type]: Create a rule chart; [Mark]: Use a rule mark; [Encoding]: Map 'min' to the x-axis and 'max' to the x2-axis; [Encoding]: Map 'groupaction' to the y-axis; [Encoding]: Map 'group' to the color channel.

Step 3. Instructions:
[View 1]; [Data]: Load data from the provided URL; [Transform]: Calculate a new field 'groupaction' as the sum of the fields 'action', 'ethnic group', and 'model'; [Transform]: Filter the data to include only rows where 'gender' is 'Women'; [Chart-Type]: Create a point chart; [Mark]: Use a point mark with size 50 and opacity 1; [Encoding]: Map 'value' to the x-axis without a title; [Encoding]: Map 'model' to the shape channel and create a legend titled 'Model' with grey labels and symbols; [Encoding]: Map 'groupaction' to the y-axis without a title, labels, or ticks; [Encoding]: Map 'ethnic group' to the color channel without a legend and use the 'dark2' color scheme; [Encoding]: Map 'ethnic group' to the fill channel and create a legend titled 'Ethnic group' using the 'dark2' color scheme; [Style]: Set the label color, symbol fill color, and title color of the legend to grey <%>
[View 2]; [Chart-Type]: Create a rule chart; [Mark]: Use a rule mark; [Encoding]: Map 'min' to the x-axis and 'max' to the x2-axis; [Encoding]: Map 'groupaction' to the y-axis; [Encoding]: Map 'ethnic group' to the color channel.","View #1:
Step 1. Primary Information: The chart type is a point chart. The 'value' is mapped to the x-axis, 'model' is mapped to the shape channel, 'groupaction' is mapped to the y-axis, and 'ethnic group' is mapped to both the color and fill channels.
Step 2. Secondary Information: The x-axis and y-axis have no titles. The legend for 'model' has grey labels and symbols. The color channel has no legend but uses the 'dark2' color scheme. The fill channel has a legend titled 'Ethic group' using the 'dark2' color scheme.
Step 3. Command: Create a point chart with 'value' on the x-axis, 'model' as the shape, 'groupaction' on the y-axis, and 'ethnic group' as the color and fill.
Step 4. Query: Point chart of 'value' by 'model', 'groupaction', 'ethnic group'
Step 5. Question: How does the 'value' vary with 'model', 'groupaction', and 'ethnic group' in the point chart?

View #2:
Step 1. Primary Information: The chart type is a rule chart. The 'min' is mapped to the x-axis, 'max' is mapped to the x2-axis, 'groupaction' is mapped to the y-axis, and 'ethnic group' is mapped to the color channel.
Step 2. Secondary Information: There is no secondary information.
Step 3. Command: Create a rule chart with 'min' on the x-axis, 'max' on the x2-axis, 'groupaction' on the y-axis, and 'ethnic group' as the color.
Step 4. Query: Rule chart of 'min', 'max', 'groupaction', 'ethnic group'
Step 5. Question: How does the 'min' and 'max' vary with 'groupaction' and 'ethnic group' in the rule chart?","View #1: [Chart-Type]: Create a point chart; [Encoding]: Map 'value' to the x-axis without a title; [Encoding]: Map 'model' to the shape channel and create a legend titled 'Model' with grey labels and symbols; [Encoding]: Map 'groupaction' to the y-axis without a title, labels, or ticks; [Encoding]: Map 'ethnic group' to the color channel without a legend and use the 'dark2' color scheme; [Encoding]: Map 'ethnic group' to the fill channel and create a legend titled 'Ethnic group' using the 'dark2' color scheme
View #2: [Chart-Type]: Create a rule chart; [Encoding]: Map 'min' to the x-axis and 'max' to the x2-axis; [Encoding]: Map 'groupaction' to the y-axis; [Encoding]: Map 'ethnic group' to the color channel.","[""The chart type is a point chart. The 'value' is mapped to the x-axis, 'model' is mapped to the shape channel, 'groupaction' is mapped to the y-axis, and 'ethnic group' is mapped to both the color and fill channels."", ""The chart type is a rule chart. The 'min' is mapped to the x-axis, 'max' is mapped to the x2-axis, 'groupaction' is mapped to the y-axis, and 'ethnic group' is mapped to the color channel.""]","[""The x-axis and y-axis have no titles. The legend for 'model' has grey labels and symbols. The color channel has no legend but uses the 'dark2' color scheme. The fill channel has a legend titled 'Ethic group' using the 'dark2' color scheme."", 'There is no secondary information.']","[""Create a point chart with 'value' on the x-axis, 'model' as the shape, 'groupaction' on the y-axis, and 'ethnic group' as the color and fill."", ""Create a rule chart with 'min' on the x-axis, 'max' on the x2-axis, 'groupaction' on the y-axis, and 'ethnic group' as the color.""]","[""Point chart of 'value' by 'model', 'groupaction', 'ethnic group'"", ""Rule chart of 'min', 'max', 'groupaction', 'ethnic group'""]","[""How does the 'value' vary with 'model', 'groupaction', and 'ethnic group' in the point chart?"", ""How does the 'min' and 'max' vary with 'groupaction' and 'ethnic group' in the rule chart?""]"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: N/A

Step 2. Instructions:
[View 1]; [Data]: Use the embedded data; [Chart-Type]: Create a bar chart; [Mark]: Use bars to represent data; [Encoding]: Map 'Year' to the x-axis, 'Access to electricity (% of population)' to the y-axis, and 'Country' to color; [Style]: Set the title to 'Access to Electricity in East Africa', the subtitle to 'Access to Electricity (% of population) from 2000-2020, Source: World Bank', and anchor the title to the start. Set the color of the title to black. Set the subtitle font style to italic and the font size to 10. Set the height of the chart to 300 and the width to 300; [Interaction]: N/A <%>

Step 3. Instructions:
[View 1]; [Data]: Use the embedded data; [Chart-Type]: Create a bar chart; [Mark]: Use bars to represent data; [Encoding]: Map 'Year' to the x-axis, 'Access to electricity (percentage of population)' to the y-axis, and 'Country' to color; [Style]: Set the title to 'Access to Electricity in East Africa', the subtitle to 'Access to Electricity (percentage of population) from 2000-2020, Source: World Bank', and anchor the title to the start. Set the color of the title to black. Set the subtitle font style to italic and the font size to 10. Set the height of the chart to 300 and the width to 300; [Interaction]: N/A <%>","View #1:
Step 1. Primary Information: The primary information in this view is the 'Year', 'Access to electricity (percentage of population)', and 'Country'.
Step 2. Secondary Information: The secondary information in this view is the type of chart, which is a bar chart.
Step 3. Command: Create a bar chart with 'Year' on the x-axis and 'Access to electricity (percentage of population)' on the y-axis.
Step 4. Query: 'Year', 'Access to electricity (percentage of population)', 'Country'
Step 5. Question: What is the percentage of the population with access to electricity in each country over the years?","View #1: [Chart-Type]: Create a bar chart; [Encoding]: Map 'Year' to the x-axis, 'Access to electricity (percentage of population)' to the y-axis, and 'Country' to color","[""The primary information in this view is the 'Year', 'Access to electricity (percentage of population)', and 'Country'.""]","['The secondary information in this view is the type of chart, which is a bar chart.']","[""Create a bar chart with 'Year' on the x-axis and 'Access to electricity (percentage of population)' on the y-axis.""]","[""'Year', 'Access to electricity (percentage of population)', 'Country'""]",['What is the percentage of the population with access to electricity in each country over the years?']
"Step 1. Composite Views:
- False

Step 2. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/Ben25Walker/Ben25Walker.github.io/main/EnergySourceClean%20(1).csv'; [Chart-Type]: Create an area chart; [Mark]: Use area as the mark for the chart; [Encoding]: Encode the 'Date' field to the x-axis, 'EnergyConsumption' field to the y-axis, and 'Energy Source' field to the color of the chart; [Transform]: Filter the data based on the year of the 'Date' field and the selected 'Energy Source'; [Interaction]: Add a selection interaction for the 'Energy Source' field; [Style]: Set the title of the chart to 'Energy Consumption in Africa by Source' and the subtitle to 'Source: Our World in Data'; [Style]: Set the width and height of the chart to 300; [Style]: Set the background color of the chart to white.

Step 3. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/Ben25Walker/Ben25Walker.github.io/main/EnergySourceClean%20(1).csv'; [Chart-Type]: Create an area chart; [Mark]: Use area as the mark for the chart; [Encoding]: Encode the 'Date' field to the x-axis, 'Energy Consumption' field to the y-axis, and 'Energy Source' field to the color of the chart; [Transform]: Filter the data based on the year of the 'Date' field and the selected 'Energy Source'; [Interaction]: Add a selection interaction for the 'Energy Source' field; [Style]: Set the title of the chart to 'Energy Consumption in Africa by Source' and the subtitle to 'Source: Our World in Data'; [Style]: Set the width and height of the chart to 300; [Style]: Set the background color of the chart to white.","View #1:
Step 1. Primary Information: The chart type is an area chart, with 'Date' field encoded to the x-axis, 'Energy Consumption' field encoded to the y-axis, and 'Energy Source' field encoded to the color of the chart.
Step 2. Secondary Information: There is no secondary information in this view.
Step 3. Command: Create an area chart with 'Date' on the x-axis, 'Energy Consumption' on the y-axis, and 'Energy Source' as the color.
Step 4. Query: Area chart, Date on x-axis, Energy Consumption on y-axis, Energy Source as color
Step 5. Question: How can we create an area chart with 'Date' on the x-axis, 'Energy Consumption' on the y-axis, and 'Energy Source' as the color?","View #1: [Chart-Type]: Create an area chart; [Encoding]: Encode the 'Date' field to the x-axis, 'Energy Consumption' field to the y-axis, and 'Energy Source' field to the color of the chart","[""The chart type is an area chart, with 'Date' field encoded to the x-axis, 'Energy Consumption' field encoded to the y-axis, and 'Energy Source' field encoded to the color of the chart.""]",['There is no secondary information in this view.'],"[""Create an area chart with 'Date' on the x-axis, 'Energy Consumption' on the y-axis, and 'Energy Source' as the color.""]","['Area chart, Date on x-axis, Energy Consumption on y-axis, Energy Source as color']","[""How can we create an area chart with 'Date' on the x-axis, 'Energy Consumption' on the y-axis, and 'Energy Source' as the color?""]"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: trellis
- Number of plots: 5

Step 2. Instructions:
[View 1]; [Data]: Load the data from the url 'https://raw.githubusercontent.com/Emilysquires02/Emilysquires02.github.io/main/error.csv'; [Chart-Type]: Create a line chart; [Mark]: Use line as the mark for the chart; [Encoding]: Map 'Date' to the x-axis with a temporal data type, format it as '%Y' and title it as 'Time'; [Encoding]: Map 'value' to the y-axis with a quantitative data type and title it as 'Index'; [Encoding]: Map 'type' to color with a nominal data type and do not display a legend; [Encoding]: Map 'area' to row with a nominal data type and do not display a title; [Style]: Set the width of the chart to 300 and the height to 40; [Style]: Set the title of the chart to 'Error value for Experimental Index of Private Housing Rental Prices' with a subtitle 'Index level (January 2015 = 100), Source: Own calculations' in italic font style and font size 10, anchor it at the start and color it black; [Style]: Do not display grid lines for the x-axis but display for the y-axis with 2 tick counts <%>

Step 3. Instructions:
[View 1]; [Data]: Load the data from the url 'https://raw.githubusercontent.com/Emilysquires02/Emilysquires02.github.io/main/error.csv'; [Chart-Type]: Create a line chart; [Mark]: Use line as the mark for the chart; [Encoding]: Map 'Time' to the x-axis with a temporal data type, format it as '%Y' and title it as 'Time'; [Encoding]: Map 'Index' to the y-axis with a quantitative data type and title it as 'Index'; [Encoding]: Map 'type' to color with a nominal data type and do not display a legend; [Encoding]: Map 'area' to row with a nominal data type and do not display a title; [Style]: Set the width of the chart to 300 and the height to 40; [Style]: Set the title of the chart to 'Error value for Experimental Index of Private Housing Rental Prices' with a subtitle 'Index level (January 2015 = 100), Source: Own calculations' in italic font style and font size 10, anchor it at the start and color it black; [Style]: Do not display grid lines for the x-axis but display for the y-axis with 2 tick counts <%>","View #1:
Step 1. Primary Information: The primary information is the line chart that maps 'Time' to the x-axis, 'Index' to the y-axis, 'type' to color, and 'area' to row.
Step 2. Secondary Information: The secondary information is the formatting details such as the temporal data type for 'Time', quantitative data type for 'Index', nominal data type for 'type' and 'area', the title for the axes, and the absence of a legend and row title.
Step 3. Command: Create a line chart with 'Time' on the x-axis, 'Index' on the y-axis, 'type' as color, and 'area' as row.
Step 4. Query: Line chart of 'Index' over 'Time' by 'type' and 'area'
Step 5. Question: How does the 'Index' change over 'Time' for different 'types' and 'areas'?","View #1: [Chart-Type]: Create a line chart; [Encoding]: Map 'Time' to the x-axis with a temporal data type, format it as '%Y' and title it as 'Time'; [Encoding]: Map 'Index' to the y-axis with a quantitative data type and title it as 'Index'; [Encoding]: Map 'type' to color with a nominal data type and do not display a legend; [Encoding]: Map 'area' to row with a nominal data type and do not display a title","[""The primary information is the line chart that maps 'Time' to the x-axis, 'Index' to the y-axis, 'type' to color, and 'area' to row.""]","[""The secondary information is the formatting details such as the temporal data type for 'Time', quantitative data type for 'Index', nominal data type for 'type' and 'area', the title for the axes, and the absence of a legend and row title.""]","[""Create a line chart with 'Time' on the x-axis, 'Index' on the y-axis, 'type' as color, and 'area' as row.""]","[""Line chart of 'Index' over 'Time' by 'type' and 'area'""]","[""How does the 'Index' change over 'Time' for different 'types' and 'areas'?""]"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: multiple views
- Number of plots: 4

Step 2. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/infrahumano/elecciones2018/master/segunda_vuelta_presidencial/segunda_vuelta_presidencial.csv' and parse the 'total_voters' and 'voters' fields as numbers; [Transform]: Aggregate the data by 'department' and calculate the sum of 'total_voters' as 'votersFordepartment'; [Mark]: Use tick marks; [Encoding]: Map 'votersFordepartment' to the x-axis and 'department' to the tooltip; [Style]: Color the marks grey, but purple if the 'dept' selection is active; [Interaction]: Add a tooltip that shows the 'department' and 'votersFordepartment' when a mark is hovered over <%>
[View 2]; [Transform]: Filter the data based on the 'dept' selection; [Mark]: Use tick marks; [Encoding]: Map 'total_voters' to the x-axis and 'municipality' to the tooltip; [Style]: Color the marks purple; [Interaction]: Add a tooltip that shows the 'municipality' and 'total_voters' when a mark is hovered over <%>
[View 3]; [Transform]: Calculate a new field 'abstention' as '(datum.total_voters - datum.voters)/datum.total_voters' and aggregate the data by 'department' to calculate the sum of 'voters' and 'total_voters' as 'votersFordepartment' and 'totalvotersFordepartment' respectively, and the mean of 'abstention' as 'abstention2'; [Mark]: Use bar marks; [Encoding]: Map 'totalvotersFordepartment' to the x-axis, '*' to the y-axis, 'abstention2' to the fill, and 'department', 'totalvotersFordepartment', 'votersFordepartment', and 'abstention2' to the tooltip; [Style]: Color the bars based on 'abstention2' and outline them in white if the 'dept' selection is active <%>
[View 4]; [Mark]: Use bar marks for both layers; [Encoding]: Map the sum of 'total_voters' to the x-axis and 'department' to the y-axis for the first layer, and the sum of 'voters' to the x-axis for the second layer; [Style]: Color the bars of the first layer pink, but red if the 'dept' selection is active, and color the bars of the second layer blue; [Interaction]: Add an interval selection named 'dept' that empties on none and encodes on the y-axis.

Step 3. Instructions:
[View 1]; [Data]: Load the data from the URL 'https://raw.githubusercontent.com/infrahumano/elecciones2018/master/segunda_vuelta_presidencial/segunda_vuelta_presidencial.csv' and parse the Total voters and Number of voters fields as numbers; [Transform]: Aggregate the data by Departments of Colombia and calculate the sum of Total voters as votersFordepartment; [Mark]: Use tick marks; [Encoding]: Map votersFordepartment to the x-axis and Departments of Colombia to the tooltip; [Style]: Color the marks grey, but purple if the dept selection is active; [Interaction]: Add a tooltip that shows the Departments of Colombia and votersFordepartment when a mark is hovered over <%>
[View 2]; [Transform]: Filter the data based on the dept selection; [Mark]: Use tick marks; [Encoding]: Map Total voters to the x-axis and Municipality to the tooltip; [Style]: Color the marks purple; [Interaction]: Add a tooltip that shows the Municipality and Total voters when a mark is hovered over <%>
[View 3]; [Transform]: Calculate a new field abstention as (datum.Total voters - datum.Number of voters)/datum.Total voters and aggregate the data by Departments of Colombia to calculate the sum of Number of voters and Total voters as votersFordepartment and totalvotersFordepartment respectively, and the mean of abstention as abstention2; [Mark]: Use bar marks; [Encoding]: Map totalvotersFordepartment to the x-axis, * to the y-axis, abstention2 to the fill, and Departments of Colombia, totalvotersFordepartment, votersFordepartment, and abstention2 to the tooltip; [Style]: Color the bars based on abstention2 and outline them in white if the dept selection is active <%>
[View 4]; [Mark]: Use bar marks for both layers; [Encoding]: Map the sum of Total voters to the x-axis and Departments of Colombia to the y-axis for the first layer, and the sum of Number of voters to the x-axis for the second layer; [Style]: Color the bars of the first layer pink, but red if the dept selection is active, and color the bars of the second layer blue; [Interaction]: Add an interval selection named dept that empties on none and encodes on the y-axis.","View #1:
Step 1. Primary Information: Voters for department, Departments of Colombia
Step 2. Secondary Information: Tooltip
Step 3. Command: Plot voters for department on the x-axis.
Step 4. Query: VotersFordepartment vs Departments of Colombia
Step 5. Question: How many voters are there for each department in Colombia?

View #2:
Step 1. Primary Information: Total voters, Municipality
Step 2. Secondary Information: Tooltip
Step 3. Command: Plot total voters on the x-axis.
Step 4. Query: Total voters vs Municipality
Step 5. Question: What is the total number of voters in each municipality?

View #3:
Step 1. Primary Information: Total voters for department, abstention2, Departments of Colombia
Step 2. Secondary Information: Tooltip, y-axis
Step 3. Command: Plot total voters for department on the x-axis and abstention2 on the fill.
Step 4. Query: TotalvotersFordepartment vs * with abstention2 fill
Step 5. Question: How does the total number of voters for each department relate to abstention2?

View #4:
Step 1. Primary Information: Sum of Total voters, Departments of Colombia, Sum of Number of voters
Step 2. Secondary Information: Two layers
Step 3. Command: Plot the sum of total voters on the x-axis for the first layer and the sum of number of voters on the x-axis for the second layer.
Step 4. Query: Sum of Total voters vs Departments of Colombia for first layer, Sum of Number of voters for second layer
Step 5. Question: How does the sum of total voters compare to the sum of number of voters in each department of Colombia?","View #1: [Encoding]: Map votersFordepartment to the x-axis and Departments of Colombia to the tooltip
View #2: [Encoding]: Map Total voters to the x-axis and Municipality to the tooltip
View #3: [Encoding]: Map totalvotersFordepartment to the x-axis, * to the y-axis, abstention2 to the fill, and Departments of Colombia, totalvotersFordepartment, votersFordepartment, and abstention2 to the tooltip
View #4: [Encoding]: Map the sum of Total voters to the x-axis and Departments of Colombia to the y-axis for the first layer, and the sum of Number of voters to the x-axis for the second layer","['Voters for department, Departments of Colombia', 'Total voters, Municipality', 'Total voters for department, abstention2, Departments of Colombia', 'Sum of Total voters, Departments of Colombia, Sum of Number of voters']","['Tooltip', 'Tooltip', 'Tooltip, y-axis', 'Two layers']","['Plot voters for department on the x-axis.', 'Plot total voters on the x-axis.', 'Plot total voters for department on the x-axis and abstention2 on the fill.', 'Plot the sum of total voters on the x-axis for the first layer and the sum of number of voters on the x-axis for the second layer.']","['VotersFordepartment vs Departments of Colombia', 'Total voters vs Municipality', 'TotalvotersFordepartment vs * with abstention2 fill', 'Sum of Total voters vs Departments of Colombia for first layer, Sum of Number of voters for second layer']","['How many voters are there for each department in Colombia?', 'What is the total number of voters in each municipality?', 'How does the total number of voters for each department relate to abstention2?', 'How does the sum of total voters compare to the sum of number of voters in each department of Colombia?']"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: multiple views
- Number of plots: 5

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL https://raw.githubusercontent.com/JofreManchola/ccu2018_ODS1121/master/visor/widgets/Paraderos/distribucionupz.json; [Chart-Type]: Create a tick chart; [Mark]: Use a tick mark; [Encoding]: Encode the 'UPlName' field on the y-axis, sort it in descending order based on the sum of 'Cnt_UPlCod'; [Style]: Color the ticks grey; [Interaction]: Add an interval selection named 'selupz' on the y-axis, with a mark style of fill '#333', fillOpacity 0.125, and stroke 'white'; [Encoding]: Add tooltips for 'UPlName' and 'OBJECTID' fields <%>
[View 2]; [Chart-Type]: Create a bar chart; [Mark]: Use a bar mark; [Encoding]: Encode the 'UPlCode' field on the x-axis, sort it in descending order based on the sum of 'Cnt_UPlCod'; [Encoding]: Encode the 'Cnt_UPlCod' field on the y-axis; [Style]: Color the bars green if they are selected in 'selupz', otherwise color them gray <%>
[View 3]; [Chart-Type]: Create a line chart; [Mark]: Use a line mark; [Encoding]: Encode the 'UPlCode' field on the x-axis; [Encoding]: Encode the 'Men_20' field on the y-axis <%>
[View 4]; [Chart-Type]: Create a line chart; [Mark]: Use a line mark; [Encoding]: Encode the 'UPlCode' field on the x-axis; [Encoding]: Encode the 'Women_20' field on the y-axis; [Style]: Color the line pink <%>
[View 5]; [Chart-Type]: Create a circle chart; [Mark]: Use a circle mark; [Encoding]: Encode the 'UPlCode' field on the x-axis; [Encoding]: Encode the 'Cnt_UPlCod' field on the y-axis; [Style]: Color the circles green if they are selected in 'selupz' 

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL https://raw.githubusercontent.com/JofreManchola/ccu2018_ODS1121/master/visor/widgets/Paraderos/distribucionupz.json; [Chart-Type]: Create a tick chart; [Mark]: Use a tick mark; [Encoding]: Encode the UPZ field on the y-axis, sort it in descending order based on the sum of Whereabouts; [Style]: Color the ticks grey; [Interaction]: Add an interval selection named 'selupz' on the y-axis, with a mark style of fill '#333', fillOpacity 0.125, and stroke 'white'; [Encoding]: Add tooltips for UPZ and OBJECTID fields <%>
[View 2]; [Chart-Type]: Create a bar chart; [Mark]: Use a bar mark; [Encoding]: Encode the UPZ field on the x-axis, sort it in descending order based on the sum of Whereabouts; [Encoding]: Encode the Whereabouts field on the y-axis; [Style]: Color the bars green if they are selected in 'selupz', otherwise color them gray <%>
[View 3]; [Chart-Type]: Create a line chart; [Mark]: Use a line mark; [Encoding]: Encode the UPZ field on the x-axis; [Encoding]: Encode the Men [%] field on the y-axis <%>
[View 4]; [Chart-Type]: Create a line chart; [Mark]: Use a line mark; [Encoding]: Encode the UPZ field on the x-axis; [Encoding]: Encode the Women [%] field on the y-axis; [Style]: Color the line pink <%>
[View 5]; [Chart-Type]: Create a circle chart; [Mark]: Use a circle mark; [Encoding]: Encode the UPZ field on the x-axis; [Encoding]: Encode the Whereabouts field on the y-axis; [Style]: Color the circles green if they are selected in 'selupz'","View #1:
Step 1. Primary Information: Tick chart with UPZ field on the y-axis sorted in descending order based on the sum of Whereabouts.
Step 2. Secondary Information: Tooltips for UPZ and OBJECTID fields.
Step 3. Command: Create a tick chart with UPZ field on the y-axis sorted by the sum of Whereabouts in descending order.
Step 4. Query: Tick chart, UPZ on y-axis, descending order by sum of Whereabouts.
Step 5. Question: What does the tick chart reveal about the UPZ field sorted by the sum of Whereabouts?

View #2:
Step 1. Primary Information: Bar chart with UPZ field on the x-axis and Whereabouts field on the y-axis, sorted in descending order based on the sum of Whereabouts.
Step 2. Secondary Information: None.
Step 3. Command: Create a bar chart with UPZ on the x-axis and Whereabouts on the y-axis, sorted by the sum of Whereabouts in descending order.
Step 4. Query: Bar chart, UPZ on x-axis, Whereabouts on y-axis, descending order by sum of Whereabouts.
Step 5. Question: How does the bar chart display the relationship between UPZ and Whereabouts?

View #3:
Step 1. Primary Information: Line chart with UPZ field on the x-axis and Men [%] field on the y-axis.
Step 2. Secondary Information: None.
Step 3. Command: Create a line chart with UPZ on the x-axis and Men [%] on the y-axis.
Step 4. Query: Line chart, UPZ on x-axis, Men [%] on y-axis.
Step 5. Question: What does the line chart show about the relationship between UPZ and Men [%]?

View #4:
Step 1. Primary Information: Line chart with UPZ field on the x-axis and Women [%] field on the y-axis.
Step 2. Secondary Information: None.
Step 3. Command: Create a line chart with UPZ on the x-axis and Women [%] on the y-axis.
Step 4. Query: Line chart, UPZ on x-axis, Women [%] on y-axis.
Step 5. Question: What does the line chart show about the relationship between UPZ and Women [%]?

View #5:
Step 1. Primary Information: Circle chart with UPZ field on the x-axis and Whereabouts field on the y-axis.
Step 2. Secondary Information: None.
Step 3. Command: Create a circle chart with UPZ on the x-axis and Whereabouts on the y-axis.
Step 4. Query: Circle chart, UPZ on x-axis, Whereabouts on y-axis.
Step 5. Question: What does the circle chart reveal about the relationship between UPZ and Whereabouts?","View #1: [Chart-Type]: Create a tick chart; [Encoding]: Encode the UPZ field on the y-axis, sort it in descending order based on the sum of Whereabouts; [Encoding]: Add tooltips for UPZ and OBJECTID fields
View #2: [Chart-Type]: Create a bar chart; [Encoding]: Encode the UPZ field on the x-axis, sort it in descending order based on the sum of Whereabouts; [Encoding]: Encode the Whereabouts field on the y-axis
View #3: [Chart-Type]: Create a line chart; [Encoding]: Encode the UPZ field on the x-axis; [Encoding]: Encode the Men [%] field on the y-axis
View #4: [Chart-Type]: Create a line chart; [Encoding]: Encode the UPZ field on the x-axis; [Encoding]: Encode the Women [%] field on the y-axis
View #5: [Chart-Type]: Create a circle chart; [Encoding]: Encode the UPZ field on the x-axis; [Encoding]: Encode the Whereabouts field on the y-axis","['Tick chart with UPZ field on the y-axis sorted in descending order based on the sum of Whereabouts.', 'Bar chart with UPZ field on the x-axis and Whereabouts field on the y-axis, sorted in descending order based on the sum of Whereabouts.', 'Line chart with UPZ field on the x-axis and Men [%] field on the y-axis.', 'Line chart with UPZ field on the x-axis and Women [%] field on the y-axis.', 'Circle chart with UPZ field on the x-axis and Whereabouts field on the y-axis.']","['Tooltips for UPZ and OBJECTID fields.', 'None.', 'None.', 'None.', 'None.']","['Create a tick chart with UPZ field on the y-axis sorted by the sum of Whereabouts in descending order.', 'Create a bar chart with UPZ on the x-axis and Whereabouts on the y-axis, sorted by the sum of Whereabouts in descending order.', 'Create a line chart with UPZ on the x-axis and Men [%] on the y-axis.', 'Create a line chart with UPZ on the x-axis and Women [%] on the y-axis.', 'Create a circle chart with UPZ on the x-axis and Whereabouts on the y-axis.']","['Tick chart, UPZ on y-axis, descending order by sum of Whereabouts.', 'Bar chart, UPZ on x-axis, Whereabouts on y-axis, descending order by sum of Whereabouts.', 'Line chart, UPZ on x-axis, Men [%] on y-axis.', 'Line chart, UPZ on x-axis, Women [%] on y-axis.', 'Circle chart, UPZ on x-axis, Whereabouts on y-axis.']","['What does the tick chart reveal about the UPZ field sorted by the sum of Whereabouts?', 'How does the bar chart display the relationship between UPZ and Whereabouts?', 'What does the line chart show about the relationship between UPZ and Men [%]?', 'What does the line chart show about the relationship between UPZ and Women [%]?', 'What does the circle chart reveal about the relationship between UPZ and Whereabouts?']"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL ""https://raw.githubusercontent.com/pkd2512/onion/998917fd760a8953801a91d6b3e603c6c25531e9/data/onion_q.csv""; [Chart-Type]: Create an area chart; [Mark]: Use area mark with monotone interpolation; [Encoding]: Encode the 'date' field to the x-axis with a temporal type and a time unit of yearmonth. Set the tick count of the axis to 18; [Encoding]: Encode the 'quantity' field to the y-axis with a quantitative type and an aggregate function of sum. Set the scale type to linear and the tick count of the axis to 5; [Encoding]: Set the color to '#e8eaf6' by default. Conditionally, if the 'state' field is selected, change the color according to the 'state' field with a nominal type and a color scheme of 'category20b'; [Interaction]: Add a single selection interaction on mouseover for the 'state' field with a select input and options of ['AP', 'ASM', 'BHR', 'DEL', 'GUJ', 'HP', 'HR', 'JH', 'JK', 'KNT', 'KER', 'MH', 'MP', 'MS', 'OR', 'PB', 'RAJ', 'TN', 'UP', 'WB']; [Style]: Set the fill opacity of the area to '0.69'.

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL ""https://raw.githubusercontent.com/pkd2512/onion/998917fd760a8953801a91d6b3e603c6c25531e9/data/onion_q.csv""; [Chart-Type]: Create an area chart; [Mark]: Use area mark with monotone interpolation; [Encoding]: Encode the 'date' field to the x-axis with a temporal type and a time unit of yearmonth. Set the tick count of the axis to 18; [Encoding]: Encode the 'quantity' field to the y-axis with a quantitative type and an aggregate function of sum. Set the scale type to linear and the tick count of the axis to 5; [Encoding]: Set the color to '#e8eaf6' by default. Conditionally, if the 'state' field is selected, change the color according to the 'state' field with a nominal type and a color scheme of 'category20b'; [Interaction]: Add a single selection interaction on mouseover for the 'state' field with a select input and options of ['AP', 'ASM', 'BHR', 'DEL', 'GUJ', 'HP', 'HR', 'JH', 'JK', 'KNT', 'KER', 'MH', 'MP', 'MS', 'OR', 'PB', 'RAJ', 'TN', 'UP', 'WB']; [Style]: Set the fill opacity of the area to '0.69'.","View #1:
Step 1. Primary Information: The chart is an area chart that represents the sum of 'quantity' over time (year-month) with a color scheme based on the 'state' field.
Step 2. Secondary Information: The x-axis is encoded with the 'date' field with a time unit of yearmonth and a tick count of 18. The y-axis is encoded with the 'quantity' field with an aggregate function of sum, a scale type of linear, and a tick count of 5. The color is '#e8eaf6' by default, but changes according to the 'state' field with a nominal type and a color scheme of 'category20b' when the 'state' field is selected.
Step 3. Command: Create an area chart showing the sum of 'quantity' over time, colored based on the 'state' field.
Step 4. Query: Sum of 'quantity' by year-month, color by 'state'
Step 5. Question: How does the sum of 'quantity' change over time for each 'state'?","View #1: [Chart-Type]: Create an area chart; [Encoding]: Encode the 'date' field to the x-axis with a temporal type and a time unit of yearmonth. Set the tick count of the axis to 18; [Encoding]: Encode the 'quantity' field to the y-axis with a quantitative type and an aggregate function of sum. Set the scale type to linear and the tick count of the axis to 5; [Encoding]: Set the color to '#e8eaf6' by default. Conditionally, if the 'state' field is selected, change the color according to the 'state' field with a nominal type and a color scheme of 'category20b'","[""The chart is an area chart that represents the sum of 'quantity' over time (year-month) with a color scheme based on the 'state' field.""]","[""The x-axis is encoded with the 'date' field with a time unit of yearmonth and a tick count of 18. The y-axis is encoded with the 'quantity' field with an aggregate function of sum, a scale type of linear, and a tick count of 5. The color is '#e8eaf6' by default, but changes according to the 'state' field with a nominal type and a color scheme of 'category20b' when the 'state' field is selected.""]","[""Create an area chart showing the sum of 'quantity' over time, colored based on the 'state' field.""]","[""Sum of 'quantity' by year-month, color by 'state'""]","[""How does the sum of 'quantity' change over time for each 'state'?""]"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: N/A

Step 2. Instructions:
[View 1]; [Data]: Start with an empty dataset; [Chart-Type]: Choose a line chart for the visualization; [Mark]: Use a line mark to represent the data; [Encoding]: Map the 'item' field to color, 'time' field to the x-axis, and 'quantity' field to the y-axis.

Step 3. Instructions:
[View 1]; [Data]: Start with an empty dataset; [Chart-Type]: Choose a line chart for the visualization; [Mark]: Use a line mark to represent the data; [Encoding]: Map the 'monkey', 'slipper', 'broom' field to color, 'time' field to the x-axis, and 'quantity' field to the y-axis.","View #1:
Step 1. Primary Information: The chart type is a line chart. The fields 'monkey', 'slipper', 'broom' are mapped to color. The 'time' field is mapped to the x-axis and the 'quantity' field is mapped to the y-axis.
Step 2. Secondary Information: None
Step 3. Command: Create a line chart with 'time' on the x-axis, 'quantity' on the y-axis, and 'monkey', 'slipper', 'broom' represented by different colors.
Step 4. Query: Line chart of 'quantity' by 'time' with color distinction for 'monkey', 'slipper', 'broom'
Step 5. Question: How does the quantity of 'monkey', 'slipper', 'broom' change over time?","View #1: [Chart-Type]: Choose a line chart for the visualization; [Encoding]: Map the 'monkey', 'slipper', 'broom' field to color, 'time' field to the x-axis, and 'quantity' field to the y-axis.","[""The chart type is a line chart. The fields 'monkey', 'slipper', 'broom' are mapped to color. The 'time' field is mapped to the x-axis and the 'quantity' field is mapped to the y-axis.""]",['None'],"[""Create a line chart with 'time' on the x-axis, 'quantity' on the y-axis, and 'monkey', 'slipper', 'broom' represented by different colors.""]","[""Line chart of 'quantity' by 'time' with color distinction for 'monkey', 'slipper', 'broom'""]","[""How does the quantity of 'monkey', 'slipper', 'broom' change over time?""]"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: trellis
- Number of plots: 8

Step 2. Instructions:
[View 1]; [Data]: Start with an empty dataset; [Chart-Type]: Choose a point chart; [Mark]: Use point as the mark; [Encoding]: Map 'year' to color, 'total_pop' to size, 'off_type' to row, 'povertyR' to x-axis, 'urbanicity' to column, and 'money_bond_rate' to y-axis; [Style]: Set the background to white; [Interaction]: Enable resizing of the chart; [Title]: Set the title to '% of money bonds (out of money and personal recognizance bonds) vs poverty rate in CO'; [Description]: Set the description to 'Vega-Lite Attempt' <%>

Step 3. Instructions:
[View 1]; [Data]: Start with an empty dataset; [Chart-Type]: Choose a point chart; [Mark]: Use point as the mark; [Encoding]: Map 'Year' to color, 'Population' to size, 'Type of Offense' to row, 'Poverty Rate (%)' to x-axis, 'Urbanicity' to column, and '% Money Bonds' to y-axis; [Style]: Set the background to white; [Interaction]: Enable resizing of the chart; [Title]: Set the title to '% of money bonds (out of money and personal recognizance bonds) vs poverty rate in CO'; [Description]: Set the description to 'Vega-Lite Attempt' <%>","View #1:
Step 1. Primary Information: The chart type is a point chart. The variables are 'Year', 'Population', 'Type of Offense', 'Poverty Rate (%)', 'Urbanicity', and '% Money Bonds'.
Step 2. Secondary Information: 'Year' is mapped to color, 'Population' to size, 'Type of Offense' to row, 'Poverty Rate (%)' to x-axis, 'Urbanicity' to column, and '% Money Bonds' to y-axis.
Step 3. Command: Create a point chart with 'Year', 'Population', 'Type of Offense', 'Poverty Rate (%)', 'Urbanicity', and '% Money Bonds'.
Step 4. Query: Point chart of 'Year', 'Population', 'Type of Offense', 'Poverty Rate (%)', 'Urbanicity', '% Money Bonds'
Step 5. Question: How does the 'Type of Offense', 'Poverty Rate (%)', 'Urbanicity', and '% Money Bonds' vary by 'Year' and 'Population' in the point chart?","View #1: [Chart-Type]: Choose a point chart; [Encoding]: Map 'Year' to color, 'Population' to size, 'Type of Offense' to row, 'Poverty Rate (%)' to x-axis, 'Urbanicity' to column, and '% Money Bonds' to y-axis","[""The chart type is a point chart. The variables are 'Year', 'Population', 'Type of Offense', 'Poverty Rate (%)', 'Urbanicity', and '% Money Bonds'.""]","[""'Year' is mapped to color, 'Population' to size, 'Type of Offense' to row, 'Poverty Rate (%)' to x-axis, 'Urbanicity' to column, and '% Money Bonds' to y-axis.""]","[""Create a point chart with 'Year', 'Population', 'Type of Offense', 'Poverty Rate (%)', 'Urbanicity', and '% Money Bonds'.""]","[""Point chart of 'Year', 'Population', 'Type of Offense', 'Poverty Rate (%)', 'Urbanicity', '% Money Bonds'""]","[""How does the 'Type of Offense', 'Poverty Rate (%)', 'Urbanicity', and '% Money Bonds' vary by 'Year' and 'Population' in the point chart?""]"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load the data; [Chart-Type]: Create a rectangular chart with a width of 170 and a height of 810; [Mark]: Use rectangles as the mark type and include data in the tooltip; [Encoding]: On the x-axis, encode the 'sample_id' field as nominal and title it as 'sample ID'. Do not sort it. On the y-axis, encode the 'metabolite' field as nominal and do not sort it. For color, encode the 'flux' field as quantitative and use a logarithmic scale with the 'viridis' scheme; [Style]: N/A; [Interaction]: N/A <%>

Step 3. Instructions:
[View 1]; [Data]: Load the data; [Chart-Type]: Create a rectangular chart with a width of 170 and a height of 810; [Mark]: Use rectangles as the mark type and include data in the tooltip; [Encoding]: On the x-axis, encode the sample ID field as nominal and title it as 'sample ID'. Do not sort it. On the y-axis, encode the metabolite field as nominal and do not sort it. For color, encode the flux field as quantitative and use a logarithmic scale with the 'viridis' scheme; [Style]: N/A; [Interaction]: N/A <%>","View #1:
Step 1. Primary Information: The chart is rectangular with a width of 170 and a height of 810. The x-axis represents the sample ID field as nominal and is titled 'sample ID'. The y-axis represents the metabolite field as nominal. The color represents the flux field as quantitative on a logarithmic scale with the 'viridis' scheme.
Step 2. Secondary Information: The x-axis and y-axis are not sorted.
Step 3. Command: Create a 170x810 rectangular chart with 'sample ID' on the x-axis, metabolite on the y-axis, and color the flux field using a logarithmic scale with the 'viridis' scheme.
Step 4. Query: Rectangular chart, 170 width, 810 height, x-axis 'sample ID', y-axis metabolite, color flux field, logarithmic scale, 'viridis' scheme
Step 5. Question: What does the 170x810 rectangular chart with 'sample ID' on the x-axis, metabolite on the y-axis, and color representing the flux field on a logarithmic scale with the 'viridis' scheme show?","View #1: [Chart-Type]: Create a rectangular chart with a width of 170 and a height of 810; [Encoding]: On the x-axis, encode the sample ID field as nominal and title it as 'sample ID'. Do not sort it. On the y-axis, encode the metabolite field as nominal and do not sort it. For color, encode the flux field as quantitative and use a logarithmic scale with the 'viridis' scheme","[""The chart is rectangular with a width of 170 and a height of 810. The x-axis represents the sample ID field as nominal and is titled 'sample ID'. The y-axis represents the metabolite field as nominal. The color represents the flux field as quantitative on a logarithmic scale with the 'viridis' scheme.""]",['The x-axis and y-axis are not sorted.'],"[""Create a 170x810 rectangular chart with 'sample ID' on the x-axis, metabolite on the y-axis, and color the flux field using a logarithmic scale with the 'viridis' scheme.""]","[""Rectangular chart, 170 width, 810 height, x-axis 'sample ID', y-axis metabolite, color flux field, logarithmic scale, 'viridis' scheme""]","[""What does the 170x810 rectangular chart with 'sample ID' on the x-axis, metabolite on the y-axis, and color representing the flux field on a logarithmic scale with the 'viridis' scheme show?""]"
"Step 1. Composite Views:
- True/False: False
- (If True) Type: N/A
- Number of plots: 1

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL 'https://raw.githubusercontent.com/RDeconomist/observatory/main/Aitken%20Fig%202a%20Formatted%20for%20FF%20and%20S.csv'; [Chart-Type]: Create a line chart; [Mark]: Use line as the mark for the chart; [Encoding]: Map 'Period' to the x-axis and 'Number employed (thousands)' to the y-axis; [Encoding]: Use 'Age Group' to color the lines; [Style]: Set the color range for the lines to ['#233a58', '#e54753', '#FFD859', '#ff8f32', '#1771b2']; [Style]: Set the height of the chart to 300 and the width to 400; [Style]: Add a description to the chart as 'NUmber employed by age group'.

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL 'https://raw.githubusercontent.com/RDeconomist/observatory/main/Aitken%20Fig%202a%20Formatted%20for%20FF%20and%20S.csv'; [Chart-Type]: Create a line chart; [Mark]: Use line as the mark for the chart; [Encoding]: Map 'Period' to the x-axis and 'UK employment by age, seasonally adjusted, cumulative growth (thousands)' to the y-axis; [Encoding]: Use 'Age Group' to color the lines; [Style]: Set the color range for the lines to ['#233a58', '#e54753', '#FFD859', '#ff8f32', '#1771b2']; [Style]: Set the height of the chart to 300 and the width to 400; [Style]: Add a description to the chart as 'NUmber employed by age group'.","View #1:
Step 1. Primary Information: The chart type is a line chart with 'Period' on the x-axis and 'UK employment by age, seasonally adjusted, cumulative growth (thousands)' on the y-axis.
Step 2. Secondary Information: The lines on the chart are colored based on 'Age Group'.
Step 3. Command: Create a line chart with 'Period' on the x-axis and 'UK employment by age, seasonally adjusted, cumulative growth (thousands)' on the y-axis.
Step 4. Query: Line chart of 'Period' vs 'UK employment by age, seasonally adjusted, cumulative growth (thousands)'
Step 5. Question: What is the trend of 'UK employment by age, seasonally adjusted, cumulative growth (thousands)' over different 'Periods'?","View #1: [Chart-Type]: Create a line chart; [Encoding]: Map 'Period' to the x-axis and 'UK employment by age, seasonally adjusted, cumulative growth (thousands)' to the y-axis; [Encoding]: Use 'Age Group' to color the lines","[""The chart type is a line chart with 'Period' on the x-axis and 'UK employment by age, seasonally adjusted, cumulative growth (thousands)' on the y-axis.""]","[""The lines on the chart are colored based on 'Age Group'.""]","[""Create a line chart with 'Period' on the x-axis and 'UK employment by age, seasonally adjusted, cumulative growth (thousands)' on the y-axis.""]","[""Line chart of 'Period' vs 'UK employment by age, seasonally adjusted, cumulative growth (thousands)'""]","[""What is the trend of 'UK employment by age, seasonally adjusted, cumulative growth (thousands)' over different 'Periods'?""]"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: layered
- Number of plots: 2

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL ""https://swsphn.github.io/nsw-covid-19-data/confirmed_cases_table1_location_agg.csv""; [Transform]: Filter data where 'lhd_2010_name' equals 'South Western Sydney' and 'lga_name19' does not equal 'Penrith'; [Transform]: Create a new field 'cumulative_count' by summing up 'confirmed_cases_count' up to the current row; [Chart-Type]: Create a bar chart; [Mark]: Use bars to represent data; [Encoding]: Map 'notification_date' to the x-axis with a time unit of 'yearmonthdate' and title 'Date'; [Encoding]: Map 'confirmed_cases_count' to the y-axis with an aggregate function of 'sum' and title 'Daily Cases by SWS LGA'; [Encoding]: Map 'lga_name19' to color with a nominal data type and title 'LGA'; [Style]: Arrange the legend for 'LGA' at the top with 4 columns; [Interaction]: Enable selection of date intervals and bind to scales <%>
[View 2]; [Chart-Type]: Create a line chart; [Mark]: Use lines to represent data; [Encoding]: Map 'notification_date' to the x-axis with a time unit of 'yearmonthdate' and title 'Date'; [Encoding]: Map 'cumulative_count' to the y-axis with an aggregate function of 'max' and title 'Cumulative Cases'; [Resolve]: Make the y-axis scale independent for each layer.

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL ""https://swsphn.github.io/nsw-covid-19-data/confirmed_cases_table1_location_agg.csv""; [Transform]: Filter data where 'lhd_2010_name' equals 'South Western Sydney' and LGA does not equal 'Penrith'; [Transform]: Create a new field 'cumulative_count' by summing up Daily Cases by SWS LGA up to the current row; [Chart-Type]: Create a bar chart; [Mark]: Use bars to represent data; [Encoding]: Map Date to the x-axis with a time unit of 'yearmonthdate' and title 'Date'; [Encoding]: Map Daily Cases by SWS LGA to the y-axis with an aggregate function of 'sum' and title 'Daily Cases by SWS LGA'; [Encoding]: Map LGA to color with a nominal data type and title 'LGA'; [Style]: Arrange the legend for 'LGA' at the top with 4 columns; [Interaction]: Enable selection of date intervals and bind to scales <%>
[View 2]; [Chart-Type]: Create a line chart; [Mark]: Use lines to represent data; [Encoding]: Map Date to the x-axis with a time unit of 'yearmonthdate' and title 'Date'; [Encoding]: Map 'cumulative_count' to the y-axis with an aggregate function of 'max' and title 'Cumulative Cases'; [Resolve]: Make the y-axis scale independent for each layer.","View #1:
Step 1. Primary Information: The bar chart represents the sum of daily cases by SWS LGA over time.
Step 2. Secondary Information: The different LGAs are represented by different colors.
Step 3. Command: Create a bar chart showing the sum of daily cases by SWS LGA over time.
Step 4. Query: Sum of Daily Cases by SWS LGA over Date
Step 5. Question: What is the sum of daily cases by SWS LGA over time?

View #2:
Step 1. Primary Information: The line chart represents the maximum cumulative count of cases over time.
Step 2. Secondary Information: None.
Step 3. Command: Create a line chart showing the maximum cumulative count of cases over time.
Step 4. Query: Maximum cumulative_count over Date
Step 5. Question: What is the maximum cumulative count of cases over time?","View #1: [Chart-Type]: Create a bar chart; [Encoding]: Map Date to the x-axis with a time unit of 'yearmonthdate' and title 'Date'; [Encoding]: Map Daily Cases by SWS LGA to the y-axis with an aggregate function of 'sum' and title 'Daily Cases by SWS LGA'; [Encoding]: Map LGA to color with a nominal data type and title 'LGA'
View #2: [Chart-Type]: Create a line chart; [Encoding]: Map Date to the x-axis with a time unit of 'yearmonthdate' and title 'Date'; [Encoding]: Map 'cumulative_count' to the y-axis with an aggregate function of 'max' and title 'Cumulative Cases'","['The bar chart represents the sum of daily cases by SWS LGA over time.', 'The line chart represents the maximum cumulative count of cases over time.']","['The different LGAs are represented by different colors.', 'None.']","['Create a bar chart showing the sum of daily cases by SWS LGA over time.', 'Create a line chart showing the maximum cumulative count of cases over time.']","['Sum of Daily Cases by SWS LGA over Date', 'Maximum cumulative_count over Date']","['What is the sum of daily cases by SWS LGA over time?', 'What is the maximum cumulative count of cases over time?']"
"Step 1. Composite Views:
- True/False: True
- (If True) Type: layered
- Number of plots: 2

Step 2. Instructions:
[View 1]; [Data]: Load data from the URL 'https://raw.githubusercontent.com/thu-ml/tianshou/f8808d236f53d86583c74f459365c9cc4184256c/examples/mujoco/benchmark/Walker2d-v3/result.json'; [Transform]: Calculate 'rew_std0' as 'rew - rew_std', 'rew_std1' as 'rew + rew_std', and 'tooltip_str' as ""rew + ' ± ' + rew_std""; [Transform]: Filter data where 'env_step' is less than or equal to the parameter 'Range'; [Encoding]: Map 'Agent' to color and 'env_step' to x-axis; [Encoding]: Map 'rew_std0' to y-axis, 'rew_std1' to y2-axis, and 'tooltip_str' to tooltip; [Mark]: Use area mark; [Style]: Set opacity to 0.3; [Interaction]: Bind 'Range' to a range input with minimum 10000 and maximum 10000000 <%>
[View 2]; [Encoding]: Map 'rew' to y-axis; [Mark]: Use line mark

Step 3. Instructions:
[View 1]; [Data]: Load data from the URL 'https://raw.githubusercontent.com/thu-ml/tianshou/f8808d236f53d86583c74f459365c9cc4184256c/examples/mujoco/benchmark/Walker2d-v3/result.json'; [Transform]: Calculate 'rew_std0' as 'rew - rew_std', 'rew_std1' as 'rew + rew_std', and 'tooltip_str' as ""rew + ' ± ' + rew_std""; [Transform]: Filter data where 'Env step' is less than or equal to the parameter 'Range'; [Encoding]: Map 'Agent' to color and 'Env step' to x-axis; [Encoding]: Map 'rew_std0' to y-axis, 'rew_std1' to y2-axis, and 'tooltip_str' to tooltip; [Mark]: Use area mark; [Style]: Set opacity to 0.3; [Interaction]: Bind 'Range' to a range input with minimum 10000 and maximum 10000000 <%>
[View 2]; [Encoding]: Map 'rew' to y-axis; [Mark]: Use line mark","View #1:
Step 1. Primary Information: 'Agent' is mapped to color, 'Env step' is mapped to x-axis, 'rew_std0' is mapped to y-axis, 'rew_std1' is mapped to y2-axis.
Step 2. Secondary Information: 'tooltip_str' is mapped to tooltip.
Step 3. Command: Map 'Agent' to color, 'Env step' to x-axis, 'rew_std0' to y-axis, and 'rew_std1' to y2-axis.
Step 4. Query: 'Agent' color, 'Env step' x-axis, 'rew_std0' y-axis, 'rew_std1' y2-axis
Step 5. Question: How is 'Agent' mapped to color, 'Env step' to x-axis, 'rew_std0' to y-axis, and 'rew_std1' to y2-axis?

View #2:
Step 1. Primary Information: 'rew' is mapped to y-axis.
Step 2. Secondary Information: None.
Step 3. Command: Map 'rew' to y-axis.
Step 4. Query: 'rew' y-axis
Step 5. Question: How is 'rew' mapped to y-axis?","View #1: [Encoding]: Map 'Agent' to color and 'Env step' to x-axis; [Encoding]: Map 'rew_std0' to y-axis, 'rew_std1' to y2-axis, and 'tooltip_str' to tooltip
View #2: [Encoding]: Map 'rew' to y-axis","[""'Agent' is mapped to color, 'Env step' is mapped to x-axis, 'rew_std0' is mapped to y-axis, 'rew_std1' is mapped to y2-axis."", ""'rew' is mapped to y-axis.""]","[""'tooltip_str' is mapped to tooltip."", 'None.']","[""Map 'Agent' to color, 'Env step' to x-axis, 'rew_std0' to y-axis, and 'rew_std1' to y2-axis."", ""Map 'rew' to y-axis.""]","[""'Agent' color, 'Env step' x-axis, 'rew_std0' y-axis, 'rew_std1' y2-axis"", ""'rew' y-axis""]","[""How is 'Agent' mapped to color, 'Env step' to x-axis, 'rew_std0' to y-axis, and 'rew_std1' to y2-axis?"", ""How is 'rew' mapped to y-axis?""]"
